{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1567425346342},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1567425346342},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1567425346342},{"_id":"source/.DS_Store","hash":"db57269e9f74922d72813f9288d83263944e6379","modified":1659612076318},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1567425346343},{"_id":"themes/next/.DS_Store","hash":"0c434e9dfd35a8dbe1e54ada05e3669f8f8ae1cb","modified":1567432941683},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1567425346343},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1567425346343},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1567425346343},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1567425346343},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1567425346343},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1567425346344},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1567425346344},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1567425346344},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1567425346345},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1567425346345},{"_id":"themes/next/_config.yml","hash":"81135bc0f6d5d0cd43a5baf7ac554e0eb7743827","modified":1567906514624},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1567425346361},{"_id":"source/_posts/9-1.md","hash":"856a637ebfb96069c5bade80555583b1b8d850f1","modified":1567868073447},{"_id":"source/_posts/C-概念性内容.md","hash":"cd004197de647182964849250815d03ec3a2da0d","modified":1659528500876},{"_id":"source/_posts/.DS_Store","hash":"614edc01002487163c1299c6d23a11f38ba4860d","modified":1659527781349},{"_id":"source/_posts/JavaScript笔记.md","hash":"ba0041934e01fc3d4c3c2d62ddf805afb5d46901","modified":1570624697968},{"_id":"source/_posts/一个-引发的“惨案”.md","hash":"d27abdda8e5d01f6037bbbad23894473c0f81c94","modified":1659528500876},{"_id":"source/_posts/七夕.md","hash":"cad2aa21e8659017480c5cc276a8ecc99bf98ae9","modified":1659613801238},{"_id":"source/_posts/flask基础(一).md","hash":"fd2abdadad0416a4dc987fa34877b727234b3c3f","modified":1568021559372},{"_id":"source/_posts/flask基础(二.)md.md","hash":"60d1d1f4acc4de16ac51782ed77272a52c12a2b5","modified":1568647429945},{"_id":"source/_posts/从花木兰说起.md","hash":"502d5c0b1d0a44b2218cd3a64db9b3acb780ed04","modified":1659528500876},{"_id":"source/_posts/写一写.md","hash":"5598e023a687cc1b9ad46c1b3fea8e39bb333bfe","modified":1659527989619},{"_id":"source/_posts/徐汉三回来了.md","hash":"6219df24df4c4e0bd3672121236c287c99c47eb2","modified":1659528500876},{"_id":"source/_posts/基本功.md","hash":"04abc6841a2bedd219c7005674cc3a1e31892d45","modified":1570332666780},{"_id":"source/_posts/观视频有感.md","hash":"30474d7665326d4f937957e6acd9821114f93518","modified":1576113558679},{"_id":"source/_posts/烦恼.md","hash":"4a98243c753b8cce787d60e9b901a6fd467912c9","modified":1567434744762},{"_id":"source/_posts/记横空出世与purple.md","hash":"fc06b234bf4ae4457fd989a2c237430e2f234dbd","modified":1570539650791},{"_id":"source/categories/index.md","hash":"80a80016c5fa621ad5c9bc0d37bbfe3a7cdb10f3","modified":1567434426507},{"_id":"source/tags/index.md","hash":"7a546c25392ce6ed51dfa60e7f96679f28031925","modified":1567434426508},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1567425346337},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1567425346338},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1567425332960},{"_id":"themes/next/.git/index","hash":"4653bf2d0f5d4476f7603dc6b915aec0675ca300","modified":1659527509634},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1567425346335},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1567425346342},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1567425346343},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1567425346343},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1567425346343},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1567425346345},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1567425346345},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1567425346345},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1567425346345},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1567425346346},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1567425346346},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1567425346346},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1567425346346},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1567425346346},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1567425346346},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1567425346346},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1567425346346},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1567425346346},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1567425346347},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1567425346347},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1567425346347},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1567425346348},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1567425346360},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1567425346360},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1567425346360},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1567425346360},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1567425346360},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1567425346360},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1567425346361},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1567425346361},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1567425346362},{"_id":"themes/next/source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1567427031264},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1567425346470},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1567425346470},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1567425346470},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567425346398},{"_id":"source/_posts/图片/.DS_Store","hash":"dc5038a890c0f0a02661ad4ea974ed273815b744","modified":1659527776344},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1567425332961},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1567425332961},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1567425332962},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1567425332964},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1567425332961},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1567425332964},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1567425332965},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1567425332963},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1567425332961},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1567425332963},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1567425332959},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1567425332965},{"_id":"themes/next/.git/logs/HEAD","hash":"9419b7ba2e50a9a0af3e6b6082d21054f3e1142c","modified":1567425346338},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1567425346348},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1567425346348},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1567425346348},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1567425346348},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1567425346349},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1567425346348},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1567425346348},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1567425346348},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1567425346349},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1567425346349},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1567425346349},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1567425346349},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1567425346350},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1567425346351},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1567425346351},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1567425346352},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1567425346352},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1567425346353},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1567425346357},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1567425346357},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1567425346357},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1567425346357},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1567425346358},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1567425346358},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1567425346358},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1567425346362},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1567425346362},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1567425346362},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1567425346362},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1567425346363},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1567425346363},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1567425346363},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1567425346363},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1567425346363},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1567425346397},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1567425346399},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1567425346399},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1567425346399},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1567425346400},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1567425346401},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1567425346401},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1567425346401},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1567425346402},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1567425346402},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1567425346403},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1567425346404},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1567425346404},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1567425346404},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1567425346405},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1567425346405},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1567425346406},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1567425346406},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1567425346407},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567425346353},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567425346353},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567425346389},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567425346389},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567425346390},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567425346396},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567425346397},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1567425346337},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1567425346349},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1567425346349},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1567425346351},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1567425346351},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1567425346351},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1567425346352},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1567425346352},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1567425346353},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1567425346352},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1567425346353},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1567425346352},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1567425346353},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1567425346354},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1567425346354},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1567425346354},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1567425346354},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1567425346354},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1567425346354},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1567425346354},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1567425346354},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1567425346355},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1567425346355},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1567425346355},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1567425346355},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1567425346355},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1567425346355},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1567425346356},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1567425346356},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1567425346356},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1567425346356},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1567425346356},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1567425346356},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1567425346357},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1567425346357},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1567425346359},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1567425346359},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1567425346359},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1567425346359},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1567425346389},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1567425346389},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1567425346390},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1567425346389},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1567425346396},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1567425346396},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1567425346395},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1567425346395},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1567425346408},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1567425346408},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1567425346408},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1567425346409},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1567425346409},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1567425346409},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1567425346410},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1567425346410},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1567425346411},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1567425346411},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1567425346412},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1567425346418},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1567425346422},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1567425346423},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1567425346423},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1567425346431},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1567425346423},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1567425346431},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1567425346431},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1567425346431},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1567425346433},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1567425346433},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1567425346434},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1567425346433},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1567425346452},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1567425346452},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1567425346433},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1567425346449},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1567425346453},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1567425346453},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1567425346452},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1567425346454},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1567425346453},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1567425346455},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1567425346455},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1567425346455},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1567425346456},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1567425346456},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1567425346456},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1567425346457},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1567425346457},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1567425346457},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1567425346458},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1567425346458},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1567425346458},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1567425346458},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1567425346459},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1567425346459},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1567425346459},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1567425346460},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1567425346461},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1567425346460},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1567425346467},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1567425346469},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1567425346470},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1567425346469},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1567425346467},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9419b7ba2e50a9a0af3e6b6082d21054f3e1142c","modified":1567425346338},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1567425346337},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1567425346358},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1567425346358},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1567425346364},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1567425346364},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1567425346364},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1567425346364},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1567425346364},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1567425346370},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1567425346380},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1567425346386},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1567425346387},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1567425346387},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1567425346388},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1567425346388},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1567425346388},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1567425346390},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1567425346390},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1567425346387},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1567425346391},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1567425346391},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1567425346391},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1567425346391},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1567425346391},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1567425346391},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1567425346392},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1567425346393},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1567425346393},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1567425346393},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1567425346393},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1567425346394},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1567425346394},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1567425346394},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1567425346394},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1567425346394},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1567425346394},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1567425346411},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1567425346417},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1567425346417},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1567425346424},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1567425346425},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1567425346426},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1567425346426},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1567425346426},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1567425346427},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1567425346429},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1567425346430},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1567425346430},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1567425346432},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1567425346432},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1567425346434},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1567425346435},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1567425346435},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1567425346451},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1567425346466},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1567425346466},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1567425346415},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1567425346416},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1567425346447},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1567425346449},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1567425346468},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9419b7ba2e50a9a0af3e6b6082d21054f3e1142c","modified":1567425346337},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1567425346364},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1567425346365},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1567425346365},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1567425346365},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1567425346365},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1567425346365},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1567425346366},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1567425346366},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1567425346366},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1567425346368},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1567425346368},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1567425346368},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1567425346369},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1567425346369},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1567425346371},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1567425346371},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1567425346372},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1567425346372},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1567425346373},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1567425346373},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1567425346374},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1567425346375},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1567425346375},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1567425346376},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1567425346377},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1567425346377},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1567425346378},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1567425346372},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1567425346378},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1567425346378},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1567425346379},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1567425346379},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1567425346374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1567425346379},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1567425346380},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1567425346380},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1567425346380},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1567425346381},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1567425346377},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1567425346378},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1567425346381},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1567425346382},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1567425346382},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1567425346381},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1567425346382},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1567425346383},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1567425346384},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1567425346383},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1567425346384},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1567425346384},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1567425346385},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1567425346385},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1567425346382},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1567425346386},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1567425346385},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1567425346383},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1567425346386},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1567425346385},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1567425346392},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1567425346392},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1567425346393},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1567425346413},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1567425346413},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1567425346413},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1567425346414},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1567425346414},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1567425346427},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1567425346428},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1567425346428},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1567425346428},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1567425346428},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1567425346429},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1567425346437},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1567425346445},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1567425346438},{"_id":"themes/next/.git/objects/pack/pack-2094ec0f6437d1788a13f0aec9c47f4ed1a77de3.idx","hash":"6507e0cdf986f371d6d304387f789444a7663c56","modified":1567425346326},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1567425346422},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1567425346465},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1567425346442},{"_id":"themes/next/source/images/avatar.png","hash":"c3444c8cd970781a6d3b2bdec41ca8c2b43dc9bc","modified":1565529524298},{"_id":"themes/next/.git/objects/pack/pack-2094ec0f6437d1788a13f0aec9c47f4ed1a77de3.pack","hash":"2ab7a76d496119b851249983db6b500a45c77c47","modified":1567425346323},{"_id":"public/categories/index.html","hash":"379fa427495135315af8eb959d178d8e3b51b172","modified":1659613678987},{"_id":"public/tags/index.html","hash":"558e20c4cd7c74f9cbd9667c64bfe63de1d80ea5","modified":1659613678987},{"_id":"public/2022/08/03/写一写/index.html","hash":"895d8adead476d76dbffafe136f6116340a20014","modified":1659613678987},{"_id":"public/2020/09/16/从花木兰说起/index.html","hash":"9025824f42d7d9451fff326d45f50513aa892424","modified":1659613678988},{"_id":"public/2020/09/01/一个-引发的“惨案”/index.html","hash":"fc9a96b4ebe57eaa97fc5b3f0222d00708804388","modified":1659613678988},{"_id":"public/2020/08/20/徐汉三回来了/index.html","hash":"3f8babcc50374093e798bc6e8db905e8c7dafbd5","modified":1659613678988},{"_id":"public/2019/09/02/烦恼/index.html","hash":"02e20411c2e6f05d7ffe53c7ecae949e5b2cba46","modified":1659613678988},{"_id":"public/2019/09/01/9-1/index.html","hash":"63164d6dd36cbff1ec683135c17b3749ef8099fc","modified":1659613678988},{"_id":"public/tags/基础/index.html","hash":"56e8f5b21bf9c7423a88fc99f86902d25bc77776","modified":1659613678988},{"_id":"public/tags/心情/index.html","hash":"8610443305a4faa5b74452d02f27fd8060342733","modified":1659613678988},{"_id":"public/tags/电影/index.html","hash":"41ecad48b2f243aa96cf46db566c8b3188a280e5","modified":1659613678988},{"_id":"public/tags/待验证/index.html","hash":"8439eed1455a32273bd30a28e1880662b9c993bd","modified":1659613678988},{"_id":"public/categories/技术/index.html","hash":"991b7cf7d6936d8701448cfefa32796c9872f8c6","modified":1659613678988},{"_id":"public/categories/随笔/index.html","hash":"8a7b0f679b8d4a8e8e9f5df73f77427a4880827b","modified":1659613678988},{"_id":"public/categories/综合/index.html","hash":"107e7534fb650a186b1d7536e0c66509e5e60081","modified":1659613678988},{"_id":"public/archives/page/2/index.html","hash":"fe364ca2374473fc597f5006f179db2a1a62d0aa","modified":1659613678988},{"_id":"public/archives/2019/index.html","hash":"dd9666eafedd02c1fd00fb71091001884d77e170","modified":1659613678988},{"_id":"public/archives/2019/09/index.html","hash":"18f8795441249492bb425265ac95010846b5e8e9","modified":1659613678988},{"_id":"public/archives/2019/10/index.html","hash":"f790f6d5465094c3218cbfc95833266ee62d877b","modified":1659613678988},{"_id":"public/archives/2019/12/index.html","hash":"f72f79d1de60cc4dd757ccb2499fc1f3f026ec38","modified":1659613678988},{"_id":"public/archives/2020/index.html","hash":"ffd41a29e85479b62ff63b86fee7fdf944ed4fdd","modified":1659613678988},{"_id":"public/archives/2020/08/index.html","hash":"309c0bcc5f87e91560abbd4433dab868fe87223f","modified":1659613678988},{"_id":"public/archives/2020/09/index.html","hash":"d04d4fa96d485031dc1b544dee10c19779cab0a2","modified":1659613678988},{"_id":"public/archives/2022/index.html","hash":"2e34a04d4e6e66265dd2f4e34e72a695a539cb67","modified":1659613678988},{"_id":"public/archives/2022/08/index.html","hash":"6615c577ac7cc4fd32fe3f896ace99c1bab85d87","modified":1659613678988},{"_id":"public/2020/08/21/C-概念性内容/index.html","hash":"209051c91c63fff91aa0ae55072c85e2739c3ba2","modified":1659613678988},{"_id":"public/2019/12/08/观视频有感/index.html","hash":"7c6bb7779f3ae0d8ad8d9a0233ab447fdae052d2","modified":1659613678988},{"_id":"public/2019/10/07/记横空出世与purple/index.html","hash":"6c368eb4c9d1c839d2e47e9a55fe2fd27d2185a9","modified":1659613678989},{"_id":"public/2019/10/06/基本功/index.html","hash":"27a1ed7a756977fee8ccc705a25fa37b80359eea","modified":1659613678989},{"_id":"public/2019/09/19/JavaScript笔记/index.html","hash":"d9013881e45e85571c89e832eda05e0889af8419","modified":1659613678989},{"_id":"public/2019/09/13/flask基础(二.)md/index.html","hash":"ac91b820ed19b8f83b0158b09ff122e95815c3c8","modified":1659613678989},{"_id":"public/2019/09/07/flask基础(一)/index.html","hash":"b98e1f39825c3b2f0b7494f66f3c2d2fb307b0a4","modified":1659613678989},{"_id":"public/index.html","hash":"220a3a94a2649ab672db03b756f4cacc9c217548","modified":1659613678989},{"_id":"public/page/2/index.html","hash":"d5713652eb98bce1eb02aadb0f7aecf8899ff391","modified":1659613678989},{"_id":"public/archives/index.html","hash":"5667c24e8528180bc82b5af2f44561ad29d27197","modified":1659613678989},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1659613678997},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1659613678998},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1659613678998},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1659613678998},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1659613678998},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1659613678998},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1659613678998},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1659613678998},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1659613678998},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1659613678998},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1659613678998},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1659613678998},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1659613678998},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1659613678998},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1659613678998},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1659613678998},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1659613678998},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1659613678998},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1659613678998},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1659613678998},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1659613678998},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1659613678998},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1659613678998},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1659613678998},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1659613678999},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1659613678999},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1659613678999},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1659613678999},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1659613678999},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1659613678999},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1659613678999},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1659613678999},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1659613679497},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1659613679501},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1659613679503},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1659613679511},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1659613679512},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1659613679512},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1659613679512},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1659613679512},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1659613679512},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1659613679512},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1659613679513},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1659613679513},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1659613679513},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1659613679513},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1659613679513},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1659613679513},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1659613679513},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1659613679513},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1659613679513},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1659613679513},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1659613679513},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1659613679513},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1659613679513},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1659613679514},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1659613679514},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1659613679514},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1659613679514},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1659613679514},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1659613679514},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1659613679514},{"_id":"public/lib/jquery_lazyload/README.html","hash":"18a600ca1aafd3bf08af52b6a6fe5f056aeed9f4","modified":1659613679514},{"_id":"public/lib/fastclick/README.html","hash":"c5a4c05ca80132b7e343d5fd1d1d1a976b4ad151","modified":1659613679514},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1659613679514},{"_id":"public/css/main.css","hash":"fc80e40fd621d14884c686012a393b71f84b21a3","modified":1659613679514},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1659613679514},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1659613679514},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1659613679514},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1659613679519},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1659613679519},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1659613679520},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1659613679520},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1659613679520},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1659613679520},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1659613679520},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1659613679520},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1659613679526},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1659613679526},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1659613679529},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1659613679530},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1659613679535},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1659613679535},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1659613679536},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1659613679536},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1659613679536},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1659613679536},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1659613679536},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1659613679539},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1659613679539},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1659613679539},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1659613679540},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1659613679540},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1659613679548},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1659613679549},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1659613679552},{"_id":"public/images/avatar.png","hash":"c3444c8cd970781a6d3b2bdec41ca8c2b43dc9bc","modified":1659613679552},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1659613679559},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1659613679562}],"Category":[{"name":"技术","_id":"cl6ez4t3l0005gisgw8ywby6c"},{"name":"随笔","_id":"cl6ez4t3u000fgisgioogu81j"},{"name":"综合","_id":"cl6ez4t410011gisg2vwroiky"}],"Data":[],"Page":[{"title":"categories","date":"2019-09-02T13:20:50.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-02 21:20:50\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-09-02T14:27:06.507Z","path":"categories/index.html","comments":1,"_id":"cl6ez4t3f0001gisglulcughw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-09-02T13:25:14.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-09-02 21:25:14\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-09-02T14:27:06.508Z","path":"tags/index.html","comments":1,"_id":"cl6ez4t3i0003gisgdeuyzkik","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"9.1","date":"2019-08-31T16:00:00.000Z","_content":"Hi \nSeptember!\n","source":"_posts/9-1.md","raw":"---\ntitle: 9.1\ndate: 2019-09-01 \ntags:\n\n---\nHi \nSeptember!\n","slug":"9-1","published":1,"updated":"2019-09-07T14:54:33.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3b0000gisgc4dnqtir","content":"<p>Hi<br>September!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi<br>September!</p>\n"},{"title":"C#概念性内容","date":"2020-08-21T12:32:40.000Z","_content":"\n这是一篇持续更新C#的文章，大多数内容直接来自微软的C#文档。\n\n## 介绍\n\nC# 中的关键组织结构概念包括程序、命名空间、类型、成员和程序集。\nC# 程序由一个或多个源文件组成。 程序声明类型，而类型则包含成员，并被整理到命名空间中。 \n\n类型示例包括类和接口。 \n成员示例包括字段、方法、属性和事件。 \n\n编译完的 C# 程序实际上会打包到程序集中。 程序集的文件扩展名通常为 .exe 或 .dll，具体取决于实现的是应用程序还是库。\n\n## 类型与变量\n\nC# 有两种类型：值类型和引用类型。 值类型的变量直接包含数据，而引用类型的变量则存储对数据（称为“对象”）的引用。 \n\n> 对于引用类型，两个变量可以引用同一对象；因此，对一个变量执行的运算可能会影响另一个变量引用的对象。 借助值类型，每个变量都有自己的数据副本；因此，对一个变量执行的运算不会影响另一个变量（ref 和 out 参数变量除外）。\n>\n\nC# 值类型又细分为简单类型、枚举类型、结构类型和可以为 null 的值类型。 \nC# 引用类型又细分为类类型、接口类型、数组类型和委托类型。\n\n###### 值类型\n\n- 简单类型：\n- 枚举类型\n- 结构类型\n- 可以为null的值类型\n- 元组值类型\n\n###### 引用类型\n\n- 类类型\n- 接口类型\n- 数组类型\n- 委托类型\n\nC# 程序使用*类型声明*创建新类型。 类型声明指定新类型的名称和成员。 用户可定义以下五种 C# 类型：类类型、结构类型、接口类型、枚举类型和委托类型。","source":"_posts/C-概念性内容.md","raw":"---\ntitle: 'C#概念性内容'\ndate: 2020-08-21 20:32:40\ncategories: 技术\ntags: 基础\n---\n\n这是一篇持续更新C#的文章，大多数内容直接来自微软的C#文档。\n\n## 介绍\n\nC# 中的关键组织结构概念包括程序、命名空间、类型、成员和程序集。\nC# 程序由一个或多个源文件组成。 程序声明类型，而类型则包含成员，并被整理到命名空间中。 \n\n类型示例包括类和接口。 \n成员示例包括字段、方法、属性和事件。 \n\n编译完的 C# 程序实际上会打包到程序集中。 程序集的文件扩展名通常为 .exe 或 .dll，具体取决于实现的是应用程序还是库。\n\n## 类型与变量\n\nC# 有两种类型：值类型和引用类型。 值类型的变量直接包含数据，而引用类型的变量则存储对数据（称为“对象”）的引用。 \n\n> 对于引用类型，两个变量可以引用同一对象；因此，对一个变量执行的运算可能会影响另一个变量引用的对象。 借助值类型，每个变量都有自己的数据副本；因此，对一个变量执行的运算不会影响另一个变量（ref 和 out 参数变量除外）。\n>\n\nC# 值类型又细分为简单类型、枚举类型、结构类型和可以为 null 的值类型。 \nC# 引用类型又细分为类类型、接口类型、数组类型和委托类型。\n\n###### 值类型\n\n- 简单类型：\n- 枚举类型\n- 结构类型\n- 可以为null的值类型\n- 元组值类型\n\n###### 引用类型\n\n- 类类型\n- 接口类型\n- 数组类型\n- 委托类型\n\nC# 程序使用*类型声明*创建新类型。 类型声明指定新类型的名称和成员。 用户可定义以下五种 C# 类型：类类型、结构类型、接口类型、枚举类型和委托类型。","slug":"C-概念性内容","published":1,"updated":"2022-08-03T12:08:20.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3g0002gisgmo1b66l8","content":"<p>这是一篇持续更新C#的文章，大多数内容直接来自微软的C#文档。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>C# 中的关键组织结构概念包括程序、命名空间、类型、成员和程序集。<br>C# 程序由一个或多个源文件组成。 程序声明类型，而类型则包含成员，并被整理到命名空间中。 </p>\n<p>类型示例包括类和接口。<br>成员示例包括字段、方法、属性和事件。 </p>\n<p>编译完的 C# 程序实际上会打包到程序集中。 程序集的文件扩展名通常为 .exe 或 .dll，具体取决于实现的是应用程序还是库。</p>\n<h2 id=\"类型与变量\"><a href=\"#类型与变量\" class=\"headerlink\" title=\"类型与变量\"></a>类型与变量</h2><p>C# 有两种类型：值类型和引用类型。 值类型的变量直接包含数据，而引用类型的变量则存储对数据（称为“对象”）的引用。 </p>\n<blockquote>\n<p>对于引用类型，两个变量可以引用同一对象；因此，对一个变量执行的运算可能会影响另一个变量引用的对象。 借助值类型，每个变量都有自己的数据副本；因此，对一个变量执行的运算不会影响另一个变量（ref 和 out 参数变量除外）。</p>\n</blockquote>\n<p>C# 值类型又细分为简单类型、枚举类型、结构类型和可以为 null 的值类型。<br>C# 引用类型又细分为类类型、接口类型、数组类型和委托类型。</p>\n<h6 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h6><ul>\n<li>简单类型：</li>\n<li>枚举类型</li>\n<li>结构类型</li>\n<li>可以为null的值类型</li>\n<li>元组值类型</li>\n</ul>\n<h6 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h6><ul>\n<li>类类型</li>\n<li>接口类型</li>\n<li>数组类型</li>\n<li>委托类型</li>\n</ul>\n<p>C# 程序使用<em>类型声明</em>创建新类型。 类型声明指定新类型的名称和成员。 用户可定义以下五种 C# 类型：类类型、结构类型、接口类型、枚举类型和委托类型。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一篇持续更新C#的文章，大多数内容直接来自微软的C#文档。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>C# 中的关键组织结构概念包括程序、命名空间、类型、成员和程序集。<br>C# 程序由一个或多个源文件组成。 程序声明类型，而类型则包含成员，并被整理到命名空间中。 </p>\n<p>类型示例包括类和接口。<br>成员示例包括字段、方法、属性和事件。 </p>\n<p>编译完的 C# 程序实际上会打包到程序集中。 程序集的文件扩展名通常为 .exe 或 .dll，具体取决于实现的是应用程序还是库。</p>\n<h2 id=\"类型与变量\"><a href=\"#类型与变量\" class=\"headerlink\" title=\"类型与变量\"></a>类型与变量</h2><p>C# 有两种类型：值类型和引用类型。 值类型的变量直接包含数据，而引用类型的变量则存储对数据（称为“对象”）的引用。 </p>\n<blockquote>\n<p>对于引用类型，两个变量可以引用同一对象；因此，对一个变量执行的运算可能会影响另一个变量引用的对象。 借助值类型，每个变量都有自己的数据副本；因此，对一个变量执行的运算不会影响另一个变量（ref 和 out 参数变量除外）。</p>\n</blockquote>\n<p>C# 值类型又细分为简单类型、枚举类型、结构类型和可以为 null 的值类型。<br>C# 引用类型又细分为类类型、接口类型、数组类型和委托类型。</p>\n<h6 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h6><ul>\n<li>简单类型：</li>\n<li>枚举类型</li>\n<li>结构类型</li>\n<li>可以为null的值类型</li>\n<li>元组值类型</li>\n</ul>\n<h6 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h6><ul>\n<li>类类型</li>\n<li>接口类型</li>\n<li>数组类型</li>\n<li>委托类型</li>\n</ul>\n<p>C# 程序使用<em>类型声明</em>创建新类型。 类型声明指定新类型的名称和成员。 用户可定义以下五种 C# 类型：类类型、结构类型、接口类型、枚举类型和委托类型。</p>\n"},{"title":"JavaScript笔记","date":"2019-09-19T15:39:25.000Z","_content":"\n想认真开始写博客，是看了阮一峰老师的博客后激发的动力，有质量的文章经年累月累积起来，想想也是很不错的。最近很想了解关于前端的一些基础知识。在网上稍稍了解了html和css后，翻到了阮老师推荐javascript书籍的文章，第一本就是DOM Scripting。看到老师的大力推荐，难免也有心想好好阅读一下，300页的书，算不上多，经过十几天的阅读，终于看完。文中Jeremy Keith对DOM和Javascript的介绍，他的思路以及讲解方式，都有值得记录和学习的地方。\n\n**阅读本书感受最深的一点是作为门外汉，在看本书时不会有知识隔阂，不会明显的感受到知识断层。作者用他的耐心、清晰的思路架构、详略得当的知识点分布为本书的内容铺下了台阶，只要顺着向上走即可。**\n\n我想分成两块内容来写，一块是对作者在这本书中传递的思想的剖析，一块是对前端基础知识的一些摘抄。\n\n##### 一：作者是如何讲解的\n\n###### 1.由浅入深\n\n作者首先介绍了JavaScript的语法，每在对具体的知识展开之前，作者会先将术语和概念做一个解释，例如何为语法，何为语句，何为变量，何为操作，何为函数，何为对象。在解释之后，再对具体的知识进行讲述。阅读起来就有条理性容易接受。在每章最后作者还会做个总结，起到很好的回顾作用。\n\n在介绍完最基础的语法后，作者开始对DOM进行介绍。同样，他也是由点及面的铺展，清晰地描述了DOM及DOM中常用的方法。\n\n再接着，作者通过一个可上手的案例，结合之前讲的内容，打造了一个网页的雏形，同时又在其中增添了不少js的介绍。\n\n作者会提出他自己倡导的一些编程原则和优良习惯。进而对这个原则和习惯做详细的解释。在此之后就是针对这些原则和习惯，结合实例对之前的代码进行改进。\n\n###### 2.先理思路，后编写\n\n在细到每个章节时，作者总会先阐明他要做什么，如何实现要做的内容，通过哪些方式可以实现。然后罗列出具体的步骤，最后是写出语句。\n\n###### 3.几个有用思路的归纳\n\n\n\n###### 4.几个实用例子用法的总结\n\n\n\n##### 二：基础知识点总结\n\n###### 1.基础语法\n\n**注释**：单行可以使用两个斜杠作为开头，// Note to self：comment are good.（等同与HTML的注释，“<!-”）\n\n跨多行的注释在整段注释内容开头加上`/*`，在整段末尾加上`*/`          \n\n```\n/* Note to self:\n   comments are good  */\n```\n\n**数据类型**：\n\n离散值（在任意时刻只能有一个值）：字符串、数值、布尔值\n\n由名字相同的多个值构成的一个集合：数组，关键字Array     例：var beatles = Array(4)\n\n**函数**：一组允许人们在代码里随时调用的语句。每当需要反复执行一段代码，可以利用函数来避免重复输入大量的相同内容。此外，把不同的数据（参数）传递给函数，它们将使用实际传递给它们的数据去完成预定的操作。\n\n**全局变量和局部变量**：全局变量可以在脚本中的任何位置被引用，它的作用域是整个脚本。局部变量只存在于对它做出声明的那个函数的内部，作用域仅限于某个特定的函数，函数外部是无法引用的。可以用var关键字为变量设定作用域，如果在某个函数中使用了var，那个变量就被视为一个局部变量，如果没有使用，那个变量就被视为全局变量。\n\n**对象**：一种非常重要的数据类型。对象是自我包含的数据集合，包含在对象里的数据可以通过两种形式——属性（property）和方法（method）访问。属性是隶属于某个特定对象的变量。方法是只有某个特定对象才能调用的函数。对象就是由一些彼此相关的属性和方法集合在一起而构成的一个数据实体。属性和方法都需要用“.”来访问。\n\n**节点**：（DOM里存在不同类型的节点，有些节点类型还包含其他类型的节点）\n\n元素节点：`<body>、<p>、<ul>`之类，这些元素在文档中的布局形成了文档的结构。元素包含其他元素，唯一没有被包含在其他元素里的唯一元素是`<html>`元素，它是节点数的根元素。\n\n文本节点：例如`<p>`元素包含着的文本就是一个文本节点。但并非所有元素节点都包含有文本节点。\n\n属性节点：元素或多或少有一些属性。属性的作用是对元素做出更具体的描述。例如几乎所有的元素都有一个title属性。因为属性总是被放在起始标签里，所以属性节点总是被包含在元素节点中。\n\n**在需要对文档的现有信息进行检索时：**\n\ngetElementById()：根据id返回一个对象，document.getElementById(id)；\n\ngetElementsByTagName()：根据元素名字返回一个数组，element.getElementsByTagName(tag)；\n\ngetAttribute()：获取元素属性的值，object.getAttribute(attribute)；\n\n**在需要把信息添加到文档里去时：**\n\ncreateElement()：按照给定的标签名创建新的元素节点。document.createElement(element)\n\ncreateTextNode()：创建一个包含着给定文本的新文本节点。document.createTextNode(text)\n\nappendChild()：给元素节点追加一个子节点。element.appendChild(newChild)\n\ninsertBefore()：把一个给定节点插入到一个给定元素节点的给定子节点的前面。element.insertBefore(newNode,targetNode)\n\nsetAttribute()：设置某个元素的属性值，object.setAttribute(attribute,value)；\n\n\n\n\n\n最适合用于浏览器查看的尺寸，400像素宽*300像素高\n\n事件处理函数：event = \"JavaScript statement(s)\"\n\n循序渐进progressive enhancement：从最核心的内容开始，逐步添加额外的功能。先用标记语言给核心内容加上正确的标记以使其获得正确的结构；然后再逐步充实被加上了正确标记的内容。充实的内容既可以是通过CSS样式表实现各种呈现效果，也可以是通过DOM脚步添加各种操作行为。","source":"_posts/JavaScript笔记.md","raw":"---\ntitle: JavaScript笔记\ndate: 2019-09-19 23:39:25\ncategories: 技术\ntags: 基础\n---\n\n想认真开始写博客，是看了阮一峰老师的博客后激发的动力，有质量的文章经年累月累积起来，想想也是很不错的。最近很想了解关于前端的一些基础知识。在网上稍稍了解了html和css后，翻到了阮老师推荐javascript书籍的文章，第一本就是DOM Scripting。看到老师的大力推荐，难免也有心想好好阅读一下，300页的书，算不上多，经过十几天的阅读，终于看完。文中Jeremy Keith对DOM和Javascript的介绍，他的思路以及讲解方式，都有值得记录和学习的地方。\n\n**阅读本书感受最深的一点是作为门外汉，在看本书时不会有知识隔阂，不会明显的感受到知识断层。作者用他的耐心、清晰的思路架构、详略得当的知识点分布为本书的内容铺下了台阶，只要顺着向上走即可。**\n\n我想分成两块内容来写，一块是对作者在这本书中传递的思想的剖析，一块是对前端基础知识的一些摘抄。\n\n##### 一：作者是如何讲解的\n\n###### 1.由浅入深\n\n作者首先介绍了JavaScript的语法，每在对具体的知识展开之前，作者会先将术语和概念做一个解释，例如何为语法，何为语句，何为变量，何为操作，何为函数，何为对象。在解释之后，再对具体的知识进行讲述。阅读起来就有条理性容易接受。在每章最后作者还会做个总结，起到很好的回顾作用。\n\n在介绍完最基础的语法后，作者开始对DOM进行介绍。同样，他也是由点及面的铺展，清晰地描述了DOM及DOM中常用的方法。\n\n再接着，作者通过一个可上手的案例，结合之前讲的内容，打造了一个网页的雏形，同时又在其中增添了不少js的介绍。\n\n作者会提出他自己倡导的一些编程原则和优良习惯。进而对这个原则和习惯做详细的解释。在此之后就是针对这些原则和习惯，结合实例对之前的代码进行改进。\n\n###### 2.先理思路，后编写\n\n在细到每个章节时，作者总会先阐明他要做什么，如何实现要做的内容，通过哪些方式可以实现。然后罗列出具体的步骤，最后是写出语句。\n\n###### 3.几个有用思路的归纳\n\n\n\n###### 4.几个实用例子用法的总结\n\n\n\n##### 二：基础知识点总结\n\n###### 1.基础语法\n\n**注释**：单行可以使用两个斜杠作为开头，// Note to self：comment are good.（等同与HTML的注释，“<!-”）\n\n跨多行的注释在整段注释内容开头加上`/*`，在整段末尾加上`*/`          \n\n```\n/* Note to self:\n   comments are good  */\n```\n\n**数据类型**：\n\n离散值（在任意时刻只能有一个值）：字符串、数值、布尔值\n\n由名字相同的多个值构成的一个集合：数组，关键字Array     例：var beatles = Array(4)\n\n**函数**：一组允许人们在代码里随时调用的语句。每当需要反复执行一段代码，可以利用函数来避免重复输入大量的相同内容。此外，把不同的数据（参数）传递给函数，它们将使用实际传递给它们的数据去完成预定的操作。\n\n**全局变量和局部变量**：全局变量可以在脚本中的任何位置被引用，它的作用域是整个脚本。局部变量只存在于对它做出声明的那个函数的内部，作用域仅限于某个特定的函数，函数外部是无法引用的。可以用var关键字为变量设定作用域，如果在某个函数中使用了var，那个变量就被视为一个局部变量，如果没有使用，那个变量就被视为全局变量。\n\n**对象**：一种非常重要的数据类型。对象是自我包含的数据集合，包含在对象里的数据可以通过两种形式——属性（property）和方法（method）访问。属性是隶属于某个特定对象的变量。方法是只有某个特定对象才能调用的函数。对象就是由一些彼此相关的属性和方法集合在一起而构成的一个数据实体。属性和方法都需要用“.”来访问。\n\n**节点**：（DOM里存在不同类型的节点，有些节点类型还包含其他类型的节点）\n\n元素节点：`<body>、<p>、<ul>`之类，这些元素在文档中的布局形成了文档的结构。元素包含其他元素，唯一没有被包含在其他元素里的唯一元素是`<html>`元素，它是节点数的根元素。\n\n文本节点：例如`<p>`元素包含着的文本就是一个文本节点。但并非所有元素节点都包含有文本节点。\n\n属性节点：元素或多或少有一些属性。属性的作用是对元素做出更具体的描述。例如几乎所有的元素都有一个title属性。因为属性总是被放在起始标签里，所以属性节点总是被包含在元素节点中。\n\n**在需要对文档的现有信息进行检索时：**\n\ngetElementById()：根据id返回一个对象，document.getElementById(id)；\n\ngetElementsByTagName()：根据元素名字返回一个数组，element.getElementsByTagName(tag)；\n\ngetAttribute()：获取元素属性的值，object.getAttribute(attribute)；\n\n**在需要把信息添加到文档里去时：**\n\ncreateElement()：按照给定的标签名创建新的元素节点。document.createElement(element)\n\ncreateTextNode()：创建一个包含着给定文本的新文本节点。document.createTextNode(text)\n\nappendChild()：给元素节点追加一个子节点。element.appendChild(newChild)\n\ninsertBefore()：把一个给定节点插入到一个给定元素节点的给定子节点的前面。element.insertBefore(newNode,targetNode)\n\nsetAttribute()：设置某个元素的属性值，object.setAttribute(attribute,value)；\n\n\n\n\n\n最适合用于浏览器查看的尺寸，400像素宽*300像素高\n\n事件处理函数：event = \"JavaScript statement(s)\"\n\n循序渐进progressive enhancement：从最核心的内容开始，逐步添加额外的功能。先用标记语言给核心内容加上正确的标记以使其获得正确的结构；然后再逐步充实被加上了正确标记的内容。充实的内容既可以是通过CSS样式表实现各种呈现效果，也可以是通过DOM脚步添加各种操作行为。","slug":"JavaScript笔记","published":1,"updated":"2019-10-09T12:38:17.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3k0004gisgzh2ppx6x","content":"<p>想认真开始写博客，是看了阮一峰老师的博客后激发的动力，有质量的文章经年累月累积起来，想想也是很不错的。最近很想了解关于前端的一些基础知识。在网上稍稍了解了html和css后，翻到了阮老师推荐javascript书籍的文章，第一本就是DOM Scripting。看到老师的大力推荐，难免也有心想好好阅读一下，300页的书，算不上多，经过十几天的阅读，终于看完。文中Jeremy Keith对DOM和Javascript的介绍，他的思路以及讲解方式，都有值得记录和学习的地方。</p>\n<p><strong>阅读本书感受最深的一点是作为门外汉，在看本书时不会有知识隔阂，不会明显的感受到知识断层。作者用他的耐心、清晰的思路架构、详略得当的知识点分布为本书的内容铺下了台阶，只要顺着向上走即可。</strong></p>\n<p>我想分成两块内容来写，一块是对作者在这本书中传递的思想的剖析，一块是对前端基础知识的一些摘抄。</p>\n<h5 id=\"一：作者是如何讲解的\"><a href=\"#一：作者是如何讲解的\" class=\"headerlink\" title=\"一：作者是如何讲解的\"></a>一：作者是如何讲解的</h5><h6 id=\"1-由浅入深\"><a href=\"#1-由浅入深\" class=\"headerlink\" title=\"1.由浅入深\"></a>1.由浅入深</h6><p>作者首先介绍了JavaScript的语法，每在对具体的知识展开之前，作者会先将术语和概念做一个解释，例如何为语法，何为语句，何为变量，何为操作，何为函数，何为对象。在解释之后，再对具体的知识进行讲述。阅读起来就有条理性容易接受。在每章最后作者还会做个总结，起到很好的回顾作用。</p>\n<p>在介绍完最基础的语法后，作者开始对DOM进行介绍。同样，他也是由点及面的铺展，清晰地描述了DOM及DOM中常用的方法。</p>\n<p>再接着，作者通过一个可上手的案例，结合之前讲的内容，打造了一个网页的雏形，同时又在其中增添了不少js的介绍。</p>\n<p>作者会提出他自己倡导的一些编程原则和优良习惯。进而对这个原则和习惯做详细的解释。在此之后就是针对这些原则和习惯，结合实例对之前的代码进行改进。</p>\n<h6 id=\"2-先理思路，后编写\"><a href=\"#2-先理思路，后编写\" class=\"headerlink\" title=\"2.先理思路，后编写\"></a>2.先理思路，后编写</h6><p>在细到每个章节时，作者总会先阐明他要做什么，如何实现要做的内容，通过哪些方式可以实现。然后罗列出具体的步骤，最后是写出语句。</p>\n<h6 id=\"3-几个有用思路的归纳\"><a href=\"#3-几个有用思路的归纳\" class=\"headerlink\" title=\"3.几个有用思路的归纳\"></a>3.几个有用思路的归纳</h6><h6 id=\"4-几个实用例子用法的总结\"><a href=\"#4-几个实用例子用法的总结\" class=\"headerlink\" title=\"4.几个实用例子用法的总结\"></a>4.几个实用例子用法的总结</h6><h5 id=\"二：基础知识点总结\"><a href=\"#二：基础知识点总结\" class=\"headerlink\" title=\"二：基础知识点总结\"></a>二：基础知识点总结</h5><h6 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1.基础语法\"></a>1.基础语法</h6><p><strong>注释</strong>：单行可以使用两个斜杠作为开头，// Note to self：comment are good.（等同与HTML的注释，“&lt;!-”）</p>\n<p>跨多行的注释在整段注释内容开头加上<code>/*</code>，在整段末尾加上<code>*/</code>          </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Note to self:</span><br><span class=\"line\">   comments are good  */</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据类型</strong>：</p>\n<p>离散值（在任意时刻只能有一个值）：字符串、数值、布尔值</p>\n<p>由名字相同的多个值构成的一个集合：数组，关键字Array     例：var beatles = Array(4)</p>\n<p><strong>函数</strong>：一组允许人们在代码里随时调用的语句。每当需要反复执行一段代码，可以利用函数来避免重复输入大量的相同内容。此外，把不同的数据（参数）传递给函数，它们将使用实际传递给它们的数据去完成预定的操作。</p>\n<p><strong>全局变量和局部变量</strong>：全局变量可以在脚本中的任何位置被引用，它的作用域是整个脚本。局部变量只存在于对它做出声明的那个函数的内部，作用域仅限于某个特定的函数，函数外部是无法引用的。可以用var关键字为变量设定作用域，如果在某个函数中使用了var，那个变量就被视为一个局部变量，如果没有使用，那个变量就被视为全局变量。</p>\n<p><strong>对象</strong>：一种非常重要的数据类型。对象是自我包含的数据集合，包含在对象里的数据可以通过两种形式——属性（property）和方法（method）访问。属性是隶属于某个特定对象的变量。方法是只有某个特定对象才能调用的函数。对象就是由一些彼此相关的属性和方法集合在一起而构成的一个数据实体。属性和方法都需要用“.”来访问。</p>\n<p><strong>节点</strong>：（DOM里存在不同类型的节点，有些节点类型还包含其他类型的节点）</p>\n<p>元素节点：<code>&lt;body&gt;、&lt;p&gt;、&lt;ul&gt;</code>之类，这些元素在文档中的布局形成了文档的结构。元素包含其他元素，唯一没有被包含在其他元素里的唯一元素是<code>&lt;html&gt;</code>元素，它是节点数的根元素。</p>\n<p>文本节点：例如<code>&lt;p&gt;</code>元素包含着的文本就是一个文本节点。但并非所有元素节点都包含有文本节点。</p>\n<p>属性节点：元素或多或少有一些属性。属性的作用是对元素做出更具体的描述。例如几乎所有的元素都有一个title属性。因为属性总是被放在起始标签里，所以属性节点总是被包含在元素节点中。</p>\n<p><strong>在需要对文档的现有信息进行检索时：</strong></p>\n<p>getElementById()：根据id返回一个对象，document.getElementById(id)；</p>\n<p>getElementsByTagName()：根据元素名字返回一个数组，element.getElementsByTagName(tag)；</p>\n<p>getAttribute()：获取元素属性的值，object.getAttribute(attribute)；</p>\n<p><strong>在需要把信息添加到文档里去时：</strong></p>\n<p>createElement()：按照给定的标签名创建新的元素节点。document.createElement(element)</p>\n<p>createTextNode()：创建一个包含着给定文本的新文本节点。document.createTextNode(text)</p>\n<p>appendChild()：给元素节点追加一个子节点。element.appendChild(newChild)</p>\n<p>insertBefore()：把一个给定节点插入到一个给定元素节点的给定子节点的前面。element.insertBefore(newNode,targetNode)</p>\n<p>setAttribute()：设置某个元素的属性值，object.setAttribute(attribute,value)；</p>\n<p>最适合用于浏览器查看的尺寸，400像素宽*300像素高</p>\n<p>事件处理函数：event = “JavaScript statement(s)”</p>\n<p>循序渐进progressive enhancement：从最核心的内容开始，逐步添加额外的功能。先用标记语言给核心内容加上正确的标记以使其获得正确的结构；然后再逐步充实被加上了正确标记的内容。充实的内容既可以是通过CSS样式表实现各种呈现效果，也可以是通过DOM脚步添加各种操作行为。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>想认真开始写博客，是看了阮一峰老师的博客后激发的动力，有质量的文章经年累月累积起来，想想也是很不错的。最近很想了解关于前端的一些基础知识。在网上稍稍了解了html和css后，翻到了阮老师推荐javascript书籍的文章，第一本就是DOM Scripting。看到老师的大力推荐，难免也有心想好好阅读一下，300页的书，算不上多，经过十几天的阅读，终于看完。文中Jeremy Keith对DOM和Javascript的介绍，他的思路以及讲解方式，都有值得记录和学习的地方。</p>\n<p><strong>阅读本书感受最深的一点是作为门外汉，在看本书时不会有知识隔阂，不会明显的感受到知识断层。作者用他的耐心、清晰的思路架构、详略得当的知识点分布为本书的内容铺下了台阶，只要顺着向上走即可。</strong></p>\n<p>我想分成两块内容来写，一块是对作者在这本书中传递的思想的剖析，一块是对前端基础知识的一些摘抄。</p>\n<h5 id=\"一：作者是如何讲解的\"><a href=\"#一：作者是如何讲解的\" class=\"headerlink\" title=\"一：作者是如何讲解的\"></a>一：作者是如何讲解的</h5><h6 id=\"1-由浅入深\"><a href=\"#1-由浅入深\" class=\"headerlink\" title=\"1.由浅入深\"></a>1.由浅入深</h6><p>作者首先介绍了JavaScript的语法，每在对具体的知识展开之前，作者会先将术语和概念做一个解释，例如何为语法，何为语句，何为变量，何为操作，何为函数，何为对象。在解释之后，再对具体的知识进行讲述。阅读起来就有条理性容易接受。在每章最后作者还会做个总结，起到很好的回顾作用。</p>\n<p>在介绍完最基础的语法后，作者开始对DOM进行介绍。同样，他也是由点及面的铺展，清晰地描述了DOM及DOM中常用的方法。</p>\n<p>再接着，作者通过一个可上手的案例，结合之前讲的内容，打造了一个网页的雏形，同时又在其中增添了不少js的介绍。</p>\n<p>作者会提出他自己倡导的一些编程原则和优良习惯。进而对这个原则和习惯做详细的解释。在此之后就是针对这些原则和习惯，结合实例对之前的代码进行改进。</p>\n<h6 id=\"2-先理思路，后编写\"><a href=\"#2-先理思路，后编写\" class=\"headerlink\" title=\"2.先理思路，后编写\"></a>2.先理思路，后编写</h6><p>在细到每个章节时，作者总会先阐明他要做什么，如何实现要做的内容，通过哪些方式可以实现。然后罗列出具体的步骤，最后是写出语句。</p>\n<h6 id=\"3-几个有用思路的归纳\"><a href=\"#3-几个有用思路的归纳\" class=\"headerlink\" title=\"3.几个有用思路的归纳\"></a>3.几个有用思路的归纳</h6><h6 id=\"4-几个实用例子用法的总结\"><a href=\"#4-几个实用例子用法的总结\" class=\"headerlink\" title=\"4.几个实用例子用法的总结\"></a>4.几个实用例子用法的总结</h6><h5 id=\"二：基础知识点总结\"><a href=\"#二：基础知识点总结\" class=\"headerlink\" title=\"二：基础知识点总结\"></a>二：基础知识点总结</h5><h6 id=\"1-基础语法\"><a href=\"#1-基础语法\" class=\"headerlink\" title=\"1.基础语法\"></a>1.基础语法</h6><p><strong>注释</strong>：单行可以使用两个斜杠作为开头，// Note to self：comment are good.（等同与HTML的注释，“&lt;!-”）</p>\n<p>跨多行的注释在整段注释内容开头加上<code>/*</code>，在整段末尾加上<code>*/</code>          </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Note to self:</span><br><span class=\"line\">   comments are good  */</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据类型</strong>：</p>\n<p>离散值（在任意时刻只能有一个值）：字符串、数值、布尔值</p>\n<p>由名字相同的多个值构成的一个集合：数组，关键字Array     例：var beatles = Array(4)</p>\n<p><strong>函数</strong>：一组允许人们在代码里随时调用的语句。每当需要反复执行一段代码，可以利用函数来避免重复输入大量的相同内容。此外，把不同的数据（参数）传递给函数，它们将使用实际传递给它们的数据去完成预定的操作。</p>\n<p><strong>全局变量和局部变量</strong>：全局变量可以在脚本中的任何位置被引用，它的作用域是整个脚本。局部变量只存在于对它做出声明的那个函数的内部，作用域仅限于某个特定的函数，函数外部是无法引用的。可以用var关键字为变量设定作用域，如果在某个函数中使用了var，那个变量就被视为一个局部变量，如果没有使用，那个变量就被视为全局变量。</p>\n<p><strong>对象</strong>：一种非常重要的数据类型。对象是自我包含的数据集合，包含在对象里的数据可以通过两种形式——属性（property）和方法（method）访问。属性是隶属于某个特定对象的变量。方法是只有某个特定对象才能调用的函数。对象就是由一些彼此相关的属性和方法集合在一起而构成的一个数据实体。属性和方法都需要用“.”来访问。</p>\n<p><strong>节点</strong>：（DOM里存在不同类型的节点，有些节点类型还包含其他类型的节点）</p>\n<p>元素节点：<code>&lt;body&gt;、&lt;p&gt;、&lt;ul&gt;</code>之类，这些元素在文档中的布局形成了文档的结构。元素包含其他元素，唯一没有被包含在其他元素里的唯一元素是<code>&lt;html&gt;</code>元素，它是节点数的根元素。</p>\n<p>文本节点：例如<code>&lt;p&gt;</code>元素包含着的文本就是一个文本节点。但并非所有元素节点都包含有文本节点。</p>\n<p>属性节点：元素或多或少有一些属性。属性的作用是对元素做出更具体的描述。例如几乎所有的元素都有一个title属性。因为属性总是被放在起始标签里，所以属性节点总是被包含在元素节点中。</p>\n<p><strong>在需要对文档的现有信息进行检索时：</strong></p>\n<p>getElementById()：根据id返回一个对象，document.getElementById(id)；</p>\n<p>getElementsByTagName()：根据元素名字返回一个数组，element.getElementsByTagName(tag)；</p>\n<p>getAttribute()：获取元素属性的值，object.getAttribute(attribute)；</p>\n<p><strong>在需要把信息添加到文档里去时：</strong></p>\n<p>createElement()：按照给定的标签名创建新的元素节点。document.createElement(element)</p>\n<p>createTextNode()：创建一个包含着给定文本的新文本节点。document.createTextNode(text)</p>\n<p>appendChild()：给元素节点追加一个子节点。element.appendChild(newChild)</p>\n<p>insertBefore()：把一个给定节点插入到一个给定元素节点的给定子节点的前面。element.insertBefore(newNode,targetNode)</p>\n<p>setAttribute()：设置某个元素的属性值，object.setAttribute(attribute,value)；</p>\n<p>最适合用于浏览器查看的尺寸，400像素宽*300像素高</p>\n<p>事件处理函数：event = “JavaScript statement(s)”</p>\n<p>循序渐进progressive enhancement：从最核心的内容开始，逐步添加额外的功能。先用标记语言给核心内容加上正确的标记以使其获得正确的结构；然后再逐步充实被加上了正确标记的内容。充实的内容既可以是通过CSS样式表实现各种呈现效果，也可以是通过DOM脚步添加各种操作行为。</p>\n"},{"title":"一个!引发的“惨案”","date":"2020-09-01T11:15:14.000Z","_content":"\n一个感叹号引发的惨案，总结教训如下：\n\n- 一定要有预备方案，在出问题的时候要想得到有另外备用的方案用于急救。\n- 认真提交代码，代码不仅仅是自己本地的，还涉及后续一系列打包测试升级等，如果在提交代码环节出了问题，那么后续再正确也无法实现代码该有的功能。\n- 测试要把牢。测试是产品上线前的最后一关，测试很重要，要考虑的尽量全面到位，即使是紧急升级，测试这一块也不能放松。\n- 业务能力最重要啦！\n\n","source":"_posts/一个-引发的“惨案”.md","raw":"---\ntitle: 一个!引发的“惨案”\ndate: 2020-09-01 19:15:14\ncategories: 随笔\ntags: 心情\n---\n\n一个感叹号引发的惨案，总结教训如下：\n\n- 一定要有预备方案，在出问题的时候要想得到有另外备用的方案用于急救。\n- 认真提交代码，代码不仅仅是自己本地的，还涉及后续一系列打包测试升级等，如果在提交代码环节出了问题，那么后续再正确也无法实现代码该有的功能。\n- 测试要把牢。测试是产品上线前的最后一关，测试很重要，要考虑的尽量全面到位，即使是紧急升级，测试这一块也不能放松。\n- 业务能力最重要啦！\n\n","slug":"一个-引发的“惨案”","published":1,"updated":"2022-08-03T12:08:20.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3n0007gisgs9zowv07","content":"<p>一个感叹号引发的惨案，总结教训如下：</p>\n<ul>\n<li>一定要有预备方案，在出问题的时候要想得到有另外备用的方案用于急救。</li>\n<li>认真提交代码，代码不仅仅是自己本地的，还涉及后续一系列打包测试升级等，如果在提交代码环节出了问题，那么后续再正确也无法实现代码该有的功能。</li>\n<li>测试要把牢。测试是产品上线前的最后一关，测试很重要，要考虑的尽量全面到位，即使是紧急升级，测试这一块也不能放松。</li>\n<li>业务能力最重要啦！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>一个感叹号引发的惨案，总结教训如下：</p>\n<ul>\n<li>一定要有预备方案，在出问题的时候要想得到有另外备用的方案用于急救。</li>\n<li>认真提交代码，代码不仅仅是自己本地的，还涉及后续一系列打包测试升级等，如果在提交代码环节出了问题，那么后续再正确也无法实现代码该有的功能。</li>\n<li>测试要把牢。测试是产品上线前的最后一关，测试很重要，要考虑的尽量全面到位，即使是紧急升级，测试这一块也不能放松。</li>\n<li>业务能力最重要啦！</li>\n</ul>\n"},{"title":"从花木兰说起","date":"2020-09-16T12:02:47.000Z","_content":"\n​        2020年迪士尼版的花木兰从上映开始我就挺关注的，我想应该是由于我对木兰诗/辞的喜欢，初中刚接触到这诗的时候就觉得它读起来朗朗上口很好记，那时候是在老师的引领下学习的，可能自身没有很大的感悟或者说体会，单纯喜欢这诗但说不出所以然来，即便老师句句解析点出中心思想等，认真想来我也没有十分走心的去感受。\n\n​         基于对木兰诗纯粹的喜欢，我关注了迪士尼版花木兰电影上映后的反响，吐槽谩骂声比比皆是。为什么会这样，当看到有评论说赵薇版的花木兰相较更符合木兰诗和中国文化，于是利用周末的闲暇我看了赵薇版的花木兰。这一次的观影体验可以说很不错，即使电影的主题可能导演更倾向以爱情为主题之一，花了较大篇幅去演绎，剩下的关于木兰的成长、战争的还原、伙伴间的情谊，在我个人看来都是确实不错的。电影画面视觉的直观呈现，辅以背景乐的磅礴大气，让我重读木兰诗时，体会到了诗中苍凉肃穆的意境。木兰从军十二年不是过家家，是实打实的参加战争，在生死边缘徘徊，万里赴戎机，关山度若飞。朔气传金柝，寒光照铁衣。将军百战死，壮士十年归。寥寥数语，把战场的冷酷、多年征战的辛酸，霸气而又低调的带过，简直帅炸了。以上是我个人在看赵薇版花木兰感受最深的。\n\n​        很幸运，我在豆瓣看到了一篇吐槽迪士尼花木兰的视频解说，这个解说说得实在是太好了！博主是迪士尼动画版花木兰的爱好者，通过动画版和真人版的对比解说，让我更深的体会到木兰诗的思想，意义深远。","source":"_posts/从花木兰说起.md","raw":"---\ntitle: 从花木兰说起\ndate: 2020-09-16 20:02:47\ncategories: 随笔\ntags: 电影\n---\n\n​        2020年迪士尼版的花木兰从上映开始我就挺关注的，我想应该是由于我对木兰诗/辞的喜欢，初中刚接触到这诗的时候就觉得它读起来朗朗上口很好记，那时候是在老师的引领下学习的，可能自身没有很大的感悟或者说体会，单纯喜欢这诗但说不出所以然来，即便老师句句解析点出中心思想等，认真想来我也没有十分走心的去感受。\n\n​         基于对木兰诗纯粹的喜欢，我关注了迪士尼版花木兰电影上映后的反响，吐槽谩骂声比比皆是。为什么会这样，当看到有评论说赵薇版的花木兰相较更符合木兰诗和中国文化，于是利用周末的闲暇我看了赵薇版的花木兰。这一次的观影体验可以说很不错，即使电影的主题可能导演更倾向以爱情为主题之一，花了较大篇幅去演绎，剩下的关于木兰的成长、战争的还原、伙伴间的情谊，在我个人看来都是确实不错的。电影画面视觉的直观呈现，辅以背景乐的磅礴大气，让我重读木兰诗时，体会到了诗中苍凉肃穆的意境。木兰从军十二年不是过家家，是实打实的参加战争，在生死边缘徘徊，万里赴戎机，关山度若飞。朔气传金柝，寒光照铁衣。将军百战死，壮士十年归。寥寥数语，把战场的冷酷、多年征战的辛酸，霸气而又低调的带过，简直帅炸了。以上是我个人在看赵薇版花木兰感受最深的。\n\n​        很幸运，我在豆瓣看到了一篇吐槽迪士尼花木兰的视频解说，这个解说说得实在是太好了！博主是迪士尼动画版花木兰的爱好者，通过动画版和真人版的对比解说，让我更深的体会到木兰诗的思想，意义深远。","slug":"从花木兰说起","published":1,"updated":"2022-08-03T12:08:20.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3o0008gisgqva0bo7a","content":"<p>​        2020年迪士尼版的花木兰从上映开始我就挺关注的，我想应该是由于我对木兰诗/辞的喜欢，初中刚接触到这诗的时候就觉得它读起来朗朗上口很好记，那时候是在老师的引领下学习的，可能自身没有很大的感悟或者说体会，单纯喜欢这诗但说不出所以然来，即便老师句句解析点出中心思想等，认真想来我也没有十分走心的去感受。</p>\n<p>​         基于对木兰诗纯粹的喜欢，我关注了迪士尼版花木兰电影上映后的反响，吐槽谩骂声比比皆是。为什么会这样，当看到有评论说赵薇版的花木兰相较更符合木兰诗和中国文化，于是利用周末的闲暇我看了赵薇版的花木兰。这一次的观影体验可以说很不错，即使电影的主题可能导演更倾向以爱情为主题之一，花了较大篇幅去演绎，剩下的关于木兰的成长、战争的还原、伙伴间的情谊，在我个人看来都是确实不错的。电影画面视觉的直观呈现，辅以背景乐的磅礴大气，让我重读木兰诗时，体会到了诗中苍凉肃穆的意境。木兰从军十二年不是过家家，是实打实的参加战争，在生死边缘徘徊，万里赴戎机，关山度若飞。朔气传金柝，寒光照铁衣。将军百战死，壮士十年归。寥寥数语，把战场的冷酷、多年征战的辛酸，霸气而又低调的带过，简直帅炸了。以上是我个人在看赵薇版花木兰感受最深的。</p>\n<p>​        很幸运，我在豆瓣看到了一篇吐槽迪士尼花木兰的视频解说，这个解说说得实在是太好了！博主是迪士尼动画版花木兰的爱好者，通过动画版和真人版的对比解说，让我更深的体会到木兰诗的思想，意义深远。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​        2020年迪士尼版的花木兰从上映开始我就挺关注的，我想应该是由于我对木兰诗/辞的喜欢，初中刚接触到这诗的时候就觉得它读起来朗朗上口很好记，那时候是在老师的引领下学习的，可能自身没有很大的感悟或者说体会，单纯喜欢这诗但说不出所以然来，即便老师句句解析点出中心思想等，认真想来我也没有十分走心的去感受。</p>\n<p>​         基于对木兰诗纯粹的喜欢，我关注了迪士尼版花木兰电影上映后的反响，吐槽谩骂声比比皆是。为什么会这样，当看到有评论说赵薇版的花木兰相较更符合木兰诗和中国文化，于是利用周末的闲暇我看了赵薇版的花木兰。这一次的观影体验可以说很不错，即使电影的主题可能导演更倾向以爱情为主题之一，花了较大篇幅去演绎，剩下的关于木兰的成长、战争的还原、伙伴间的情谊，在我个人看来都是确实不错的。电影画面视觉的直观呈现，辅以背景乐的磅礴大气，让我重读木兰诗时，体会到了诗中苍凉肃穆的意境。木兰从军十二年不是过家家，是实打实的参加战争，在生死边缘徘徊，万里赴戎机，关山度若飞。朔气传金柝，寒光照铁衣。将军百战死，壮士十年归。寥寥数语，把战场的冷酷、多年征战的辛酸，霸气而又低调的带过，简直帅炸了。以上是我个人在看赵薇版花木兰感受最深的。</p>\n<p>​        很幸运，我在豆瓣看到了一篇吐槽迪士尼花木兰的视频解说，这个解说说得实在是太好了！博主是迪士尼动画版花木兰的爱好者，通过动画版和真人版的对比解说，让我更深的体会到木兰诗的思想，意义深远。</p>\n"},{"title":"徐汉三回来了","date":"2020-08-20T12:44:06.000Z","_content":"\n​       没错，我徐汉三回来了。（满满的中二味哈哈~)","source":"_posts/徐汉三回来了.md","raw":"---\ntitle: '徐汉三回来了'\ndate: 2020-08-20 20:44:06\ncategories: 随笔\ntags: 心情\n---\n\n​       没错，我徐汉三回来了。（满满的中二味哈哈~)","slug":"徐汉三回来了","published":1,"updated":"2022-08-03T12:08:20.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3p0009gisgyjthh0ia","content":"<p>​       没错，我徐汉三回来了。（满满的中二味哈哈~)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​       没错，我徐汉三回来了。（满满的中二味哈哈~)</p>\n"},{"title":"写一写","date":"2022-08-03T11:52:45.000Z","_content":"近两年没写博客了，重新开始记录的一个契机是换了新工作认识的同事，突然开始用hexo写博客了，另外就是每天上班大把的时间在摸鱼（这话可不敢让领导看到），时间久了不免摸得有点心虚。想一想，倒不如把这个上班的划水时间用来写一写博客，不限类型，可以是工作用到的技术，或是新闻激发的感想等等，忙的时候就不写了。\n\n好记性不如烂笔头，趁我还有那么一点点想法，一点点动力多写一写。希望我的博客，能和现在这份工作一样，尽量坚持的久一些。\n\n这几天还真有大事发生，国家层面的大事。佩洛西作为美国的第三把手，窜访了还没有被解放的台湾地区，公然违反了中美三个联合公报规定和一个中国的原则，这很明显就是美国和台湾的挑衅啊！作为一个普通的小老百姓，自然希望看到祖国强有力的反制，可是似乎，就目前而言的力度，出手不够快，不够狠，让人觉得差的不止一点点意思。也许是高层在忌惮美国，也许是高层想要通过更好的方式获得利益的最大化所以没有采取过激的手段？但是高层真的没想过老百姓心里会有多憋屈吗...总之总之，还是选择相信人民的子弟兵。\n","source":"_posts/写一写.md","raw":"---\ntitle: 写一写\n\ndate: 2022-08-03 19:52:45\ncategories: 随笔\ntags: 心情\n---\n近两年没写博客了，重新开始记录的一个契机是换了新工作认识的同事，突然开始用hexo写博客了，另外就是每天上班大把的时间在摸鱼（这话可不敢让领导看到），时间久了不免摸得有点心虚。想一想，倒不如把这个上班的划水时间用来写一写博客，不限类型，可以是工作用到的技术，或是新闻激发的感想等等，忙的时候就不写了。\n\n好记性不如烂笔头，趁我还有那么一点点想法，一点点动力多写一写。希望我的博客，能和现在这份工作一样，尽量坚持的久一些。\n\n这几天还真有大事发生，国家层面的大事。佩洛西作为美国的第三把手，窜访了还没有被解放的台湾地区，公然违反了中美三个联合公报规定和一个中国的原则，这很明显就是美国和台湾的挑衅啊！作为一个普通的小老百姓，自然希望看到祖国强有力的反制，可是似乎，就目前而言的力度，出手不够快，不够狠，让人觉得差的不止一点点意思。也许是高层在忌惮美国，也许是高层想要通过更好的方式获得利益的最大化所以没有采取过激的手段？但是高层真的没想过老百姓心里会有多憋屈吗...总之总之，还是选择相信人民的子弟兵。\n","slug":"写一写","published":1,"updated":"2022-08-03T11:59:49.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3s000dgisgdmhucn1c","content":"<p>近两年没写博客了，重新开始记录的一个契机是换了新工作认识的同事，突然开始用hexo写博客了，另外就是每天上班大把的时间在摸鱼（这话可不敢让领导看到），时间久了不免摸得有点心虚。想一想，倒不如把这个上班的划水时间用来写一写博客，不限类型，可以是工作用到的技术，或是新闻激发的感想等等，忙的时候就不写了。</p>\n<p>好记性不如烂笔头，趁我还有那么一点点想法，一点点动力多写一写。希望我的博客，能和现在这份工作一样，尽量坚持的久一些。</p>\n<p>这几天还真有大事发生，国家层面的大事。佩洛西作为美国的第三把手，窜访了还没有被解放的台湾地区，公然违反了中美三个联合公报规定和一个中国的原则，这很明显就是美国和台湾的挑衅啊！作为一个普通的小老百姓，自然希望看到祖国强有力的反制，可是似乎，就目前而言的力度，出手不够快，不够狠，让人觉得差的不止一点点意思。也许是高层在忌惮美国，也许是高层想要通过更好的方式获得利益的最大化所以没有采取过激的手段？但是高层真的没想过老百姓心里会有多憋屈吗…总之总之，还是选择相信人民的子弟兵。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>近两年没写博客了，重新开始记录的一个契机是换了新工作认识的同事，突然开始用hexo写博客了，另外就是每天上班大把的时间在摸鱼（这话可不敢让领导看到），时间久了不免摸得有点心虚。想一想，倒不如把这个上班的划水时间用来写一写博客，不限类型，可以是工作用到的技术，或是新闻激发的感想等等，忙的时候就不写了。</p>\n<p>好记性不如烂笔头，趁我还有那么一点点想法，一点点动力多写一写。希望我的博客，能和现在这份工作一样，尽量坚持的久一些。</p>\n<p>这几天还真有大事发生，国家层面的大事。佩洛西作为美国的第三把手，窜访了还没有被解放的台湾地区，公然违反了中美三个联合公报规定和一个中国的原则，这很明显就是美国和台湾的挑衅啊！作为一个普通的小老百姓，自然希望看到祖国强有力的反制，可是似乎，就目前而言的力度，出手不够快，不够狠，让人觉得差的不止一点点意思。也许是高层在忌惮美国，也许是高层想要通过更好的方式获得利益的最大化所以没有采取过激的手段？但是高层真的没想过老百姓心里会有多憋屈吗…总之总之，还是选择相信人民的子弟兵。</p>\n"},{"title":"基本功","date":"2019-10-06T03:25:21.000Z","_content":"\n学习知识点掌握（重要）\n\n#### 1.python\n\n##### 框架：\n\n###### Flask、tornado\n\n###### 框架和库有什么区别？\n\n###### 什么是库什么是模块（module）\n\n###### generate迭代器\n\n###### yield协程\n\n###### 单元测试\n\n##### Flask:\n\n###### proxy有什么用\n\n###### WSGI协议\n\n##### Tornado:\n\n###### Ioloop怎么实现\n\n###### 异步什么意思\n\n###### 非阻塞\n\n###### c10k问题\n\n###### 元类/ORM\n\n###### 装饰器\n\n#### 2.Linux操作系统\n\n##### 进程/线程\n\n##### 进程：\n\n###### 一段代码\n\n###### 数据\n\n###### 栈\n\n##### 线程\n\n###### 内核级线程\n\n###### 用户线程\n\n##### 内存/虚存\n\n##### CPU、内核\n\n##### 内核态\n\n##### 用户态\n\n#### 3.数据结构与算法\n\n##### 十种排序：\n\n##### 快排\n\n##### 堆排\n\n##### 希尔\n\n##### 冒泡\n\n##### 桶排\n\n##### 树\n\n##### 二叉树（反转二叉树）\n\n##### 平衡树 完全树 红黑树\n\n##### 链表\n\n##### 递归\n\n##### 动态规划\n\n#### 4.mysql\n\n#### 5.Redis\n\n##### 实现原理\n\n##### 支持哪些应用\n\n#### 6.消息队列/异步\n\n#### 7.git用法（add、commit、push、pull、fetch）\n\n#### 8.通信协议\n\n##### 7层\n\n##### TCP（三次、四次）\n\n##### UBP\n\n#### 9.持续集成\n\n##### CI\n\n##### Jckins\n\n#### 10.docker","source":"_posts/基本功.md","raw":"---\ntitle: 基本功\ndate: 2019-10-06 11:25:21\ncategories: 综合\ntags: 基础\n---\n\n学习知识点掌握（重要）\n\n#### 1.python\n\n##### 框架：\n\n###### Flask、tornado\n\n###### 框架和库有什么区别？\n\n###### 什么是库什么是模块（module）\n\n###### generate迭代器\n\n###### yield协程\n\n###### 单元测试\n\n##### Flask:\n\n###### proxy有什么用\n\n###### WSGI协议\n\n##### Tornado:\n\n###### Ioloop怎么实现\n\n###### 异步什么意思\n\n###### 非阻塞\n\n###### c10k问题\n\n###### 元类/ORM\n\n###### 装饰器\n\n#### 2.Linux操作系统\n\n##### 进程/线程\n\n##### 进程：\n\n###### 一段代码\n\n###### 数据\n\n###### 栈\n\n##### 线程\n\n###### 内核级线程\n\n###### 用户线程\n\n##### 内存/虚存\n\n##### CPU、内核\n\n##### 内核态\n\n##### 用户态\n\n#### 3.数据结构与算法\n\n##### 十种排序：\n\n##### 快排\n\n##### 堆排\n\n##### 希尔\n\n##### 冒泡\n\n##### 桶排\n\n##### 树\n\n##### 二叉树（反转二叉树）\n\n##### 平衡树 完全树 红黑树\n\n##### 链表\n\n##### 递归\n\n##### 动态规划\n\n#### 4.mysql\n\n#### 5.Redis\n\n##### 实现原理\n\n##### 支持哪些应用\n\n#### 6.消息队列/异步\n\n#### 7.git用法（add、commit、push、pull、fetch）\n\n#### 8.通信协议\n\n##### 7层\n\n##### TCP（三次、四次）\n\n##### UBP\n\n#### 9.持续集成\n\n##### CI\n\n##### Jckins\n\n#### 10.docker","slug":"基本功","published":1,"updated":"2019-10-06T03:31:06.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3t000egisg158df3xs","content":"<p>学习知识点掌握（重要）</p>\n<h4 id=\"1-python\"><a href=\"#1-python\" class=\"headerlink\" title=\"1.python\"></a>1.python</h4><h5 id=\"框架：\"><a href=\"#框架：\" class=\"headerlink\" title=\"框架：\"></a>框架：</h5><h6 id=\"Flask、tornado\"><a href=\"#Flask、tornado\" class=\"headerlink\" title=\"Flask、tornado\"></a>Flask、tornado</h6><h6 id=\"框架和库有什么区别？\"><a href=\"#框架和库有什么区别？\" class=\"headerlink\" title=\"框架和库有什么区别？\"></a>框架和库有什么区别？</h6><h6 id=\"什么是库什么是模块（module）\"><a href=\"#什么是库什么是模块（module）\" class=\"headerlink\" title=\"什么是库什么是模块（module）\"></a>什么是库什么是模块（module）</h6><h6 id=\"generate迭代器\"><a href=\"#generate迭代器\" class=\"headerlink\" title=\"generate迭代器\"></a>generate迭代器</h6><h6 id=\"yield协程\"><a href=\"#yield协程\" class=\"headerlink\" title=\"yield协程\"></a>yield协程</h6><h6 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h6><h5 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask:\"></a>Flask:</h5><h6 id=\"proxy有什么用\"><a href=\"#proxy有什么用\" class=\"headerlink\" title=\"proxy有什么用\"></a>proxy有什么用</h6><h6 id=\"WSGI协议\"><a href=\"#WSGI协议\" class=\"headerlink\" title=\"WSGI协议\"></a>WSGI协议</h6><h5 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado:\"></a>Tornado:</h5><h6 id=\"Ioloop怎么实现\"><a href=\"#Ioloop怎么实现\" class=\"headerlink\" title=\"Ioloop怎么实现\"></a>Ioloop怎么实现</h6><h6 id=\"异步什么意思\"><a href=\"#异步什么意思\" class=\"headerlink\" title=\"异步什么意思\"></a>异步什么意思</h6><h6 id=\"非阻塞\"><a href=\"#非阻塞\" class=\"headerlink\" title=\"非阻塞\"></a>非阻塞</h6><h6 id=\"c10k问题\"><a href=\"#c10k问题\" class=\"headerlink\" title=\"c10k问题\"></a>c10k问题</h6><h6 id=\"元类-ORM\"><a href=\"#元类-ORM\" class=\"headerlink\" title=\"元类/ORM\"></a>元类/ORM</h6><h6 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h6><h4 id=\"2-Linux操作系统\"><a href=\"#2-Linux操作系统\" class=\"headerlink\" title=\"2.Linux操作系统\"></a>2.Linux操作系统</h4><h5 id=\"进程-线程\"><a href=\"#进程-线程\" class=\"headerlink\" title=\"进程/线程\"></a>进程/线程</h5><h5 id=\"进程：\"><a href=\"#进程：\" class=\"headerlink\" title=\"进程：\"></a>进程：</h5><h6 id=\"一段代码\"><a href=\"#一段代码\" class=\"headerlink\" title=\"一段代码\"></a>一段代码</h6><h6 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h6><h6 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h6><h5 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h5><h6 id=\"内核级线程\"><a href=\"#内核级线程\" class=\"headerlink\" title=\"内核级线程\"></a>内核级线程</h6><h6 id=\"用户线程\"><a href=\"#用户线程\" class=\"headerlink\" title=\"用户线程\"></a>用户线程</h6><h5 id=\"内存-虚存\"><a href=\"#内存-虚存\" class=\"headerlink\" title=\"内存/虚存\"></a>内存/虚存</h5><h5 id=\"CPU、内核\"><a href=\"#CPU、内核\" class=\"headerlink\" title=\"CPU、内核\"></a>CPU、内核</h5><h5 id=\"内核态\"><a href=\"#内核态\" class=\"headerlink\" title=\"内核态\"></a>内核态</h5><h5 id=\"用户态\"><a href=\"#用户态\" class=\"headerlink\" title=\"用户态\"></a>用户态</h5><h4 id=\"3-数据结构与算法\"><a href=\"#3-数据结构与算法\" class=\"headerlink\" title=\"3.数据结构与算法\"></a>3.数据结构与算法</h4><h5 id=\"十种排序：\"><a href=\"#十种排序：\" class=\"headerlink\" title=\"十种排序：\"></a>十种排序：</h5><h5 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h5><h5 id=\"堆排\"><a href=\"#堆排\" class=\"headerlink\" title=\"堆排\"></a>堆排</h5><h5 id=\"希尔\"><a href=\"#希尔\" class=\"headerlink\" title=\"希尔\"></a>希尔</h5><h5 id=\"冒泡\"><a href=\"#冒泡\" class=\"headerlink\" title=\"冒泡\"></a>冒泡</h5><h5 id=\"桶排\"><a href=\"#桶排\" class=\"headerlink\" title=\"桶排\"></a>桶排</h5><h5 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h5><h5 id=\"二叉树（反转二叉树）\"><a href=\"#二叉树（反转二叉树）\" class=\"headerlink\" title=\"二叉树（反转二叉树）\"></a>二叉树（反转二叉树）</h5><h5 id=\"平衡树-完全树-红黑树\"><a href=\"#平衡树-完全树-红黑树\" class=\"headerlink\" title=\"平衡树 完全树 红黑树\"></a>平衡树 完全树 红黑树</h5><h5 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h5><h5 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h5><h5 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h5><h4 id=\"4-mysql\"><a href=\"#4-mysql\" class=\"headerlink\" title=\"4.mysql\"></a>4.mysql</h4><h4 id=\"5-Redis\"><a href=\"#5-Redis\" class=\"headerlink\" title=\"5.Redis\"></a>5.Redis</h4><h5 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h5><h5 id=\"支持哪些应用\"><a href=\"#支持哪些应用\" class=\"headerlink\" title=\"支持哪些应用\"></a>支持哪些应用</h5><h4 id=\"6-消息队列-异步\"><a href=\"#6-消息队列-异步\" class=\"headerlink\" title=\"6.消息队列/异步\"></a>6.消息队列/异步</h4><h4 id=\"7-git用法（add、commit、push、pull、fetch）\"><a href=\"#7-git用法（add、commit、push、pull、fetch）\" class=\"headerlink\" title=\"7.git用法（add、commit、push、pull、fetch）\"></a>7.git用法（add、commit、push、pull、fetch）</h4><h4 id=\"8-通信协议\"><a href=\"#8-通信协议\" class=\"headerlink\" title=\"8.通信协议\"></a>8.通信协议</h4><h5 id=\"7层\"><a href=\"#7层\" class=\"headerlink\" title=\"7层\"></a>7层</h5><h5 id=\"TCP（三次、四次）\"><a href=\"#TCP（三次、四次）\" class=\"headerlink\" title=\"TCP（三次、四次）\"></a>TCP（三次、四次）</h5><h5 id=\"UBP\"><a href=\"#UBP\" class=\"headerlink\" title=\"UBP\"></a>UBP</h5><h4 id=\"9-持续集成\"><a href=\"#9-持续集成\" class=\"headerlink\" title=\"9.持续集成\"></a>9.持续集成</h4><h5 id=\"CI\"><a href=\"#CI\" class=\"headerlink\" title=\"CI\"></a>CI</h5><h5 id=\"Jckins\"><a href=\"#Jckins\" class=\"headerlink\" title=\"Jckins\"></a>Jckins</h5><h4 id=\"10-docker\"><a href=\"#10-docker\" class=\"headerlink\" title=\"10.docker\"></a>10.docker</h4>","site":{"data":{}},"excerpt":"","more":"<p>学习知识点掌握（重要）</p>\n<h4 id=\"1-python\"><a href=\"#1-python\" class=\"headerlink\" title=\"1.python\"></a>1.python</h4><h5 id=\"框架：\"><a href=\"#框架：\" class=\"headerlink\" title=\"框架：\"></a>框架：</h5><h6 id=\"Flask、tornado\"><a href=\"#Flask、tornado\" class=\"headerlink\" title=\"Flask、tornado\"></a>Flask、tornado</h6><h6 id=\"框架和库有什么区别？\"><a href=\"#框架和库有什么区别？\" class=\"headerlink\" title=\"框架和库有什么区别？\"></a>框架和库有什么区别？</h6><h6 id=\"什么是库什么是模块（module）\"><a href=\"#什么是库什么是模块（module）\" class=\"headerlink\" title=\"什么是库什么是模块（module）\"></a>什么是库什么是模块（module）</h6><h6 id=\"generate迭代器\"><a href=\"#generate迭代器\" class=\"headerlink\" title=\"generate迭代器\"></a>generate迭代器</h6><h6 id=\"yield协程\"><a href=\"#yield协程\" class=\"headerlink\" title=\"yield协程\"></a>yield协程</h6><h6 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h6><h5 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask:\"></a>Flask:</h5><h6 id=\"proxy有什么用\"><a href=\"#proxy有什么用\" class=\"headerlink\" title=\"proxy有什么用\"></a>proxy有什么用</h6><h6 id=\"WSGI协议\"><a href=\"#WSGI协议\" class=\"headerlink\" title=\"WSGI协议\"></a>WSGI协议</h6><h5 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado:\"></a>Tornado:</h5><h6 id=\"Ioloop怎么实现\"><a href=\"#Ioloop怎么实现\" class=\"headerlink\" title=\"Ioloop怎么实现\"></a>Ioloop怎么实现</h6><h6 id=\"异步什么意思\"><a href=\"#异步什么意思\" class=\"headerlink\" title=\"异步什么意思\"></a>异步什么意思</h6><h6 id=\"非阻塞\"><a href=\"#非阻塞\" class=\"headerlink\" title=\"非阻塞\"></a>非阻塞</h6><h6 id=\"c10k问题\"><a href=\"#c10k问题\" class=\"headerlink\" title=\"c10k问题\"></a>c10k问题</h6><h6 id=\"元类-ORM\"><a href=\"#元类-ORM\" class=\"headerlink\" title=\"元类/ORM\"></a>元类/ORM</h6><h6 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h6><h4 id=\"2-Linux操作系统\"><a href=\"#2-Linux操作系统\" class=\"headerlink\" title=\"2.Linux操作系统\"></a>2.Linux操作系统</h4><h5 id=\"进程-线程\"><a href=\"#进程-线程\" class=\"headerlink\" title=\"进程/线程\"></a>进程/线程</h5><h5 id=\"进程：\"><a href=\"#进程：\" class=\"headerlink\" title=\"进程：\"></a>进程：</h5><h6 id=\"一段代码\"><a href=\"#一段代码\" class=\"headerlink\" title=\"一段代码\"></a>一段代码</h6><h6 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h6><h6 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h6><h5 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h5><h6 id=\"内核级线程\"><a href=\"#内核级线程\" class=\"headerlink\" title=\"内核级线程\"></a>内核级线程</h6><h6 id=\"用户线程\"><a href=\"#用户线程\" class=\"headerlink\" title=\"用户线程\"></a>用户线程</h6><h5 id=\"内存-虚存\"><a href=\"#内存-虚存\" class=\"headerlink\" title=\"内存/虚存\"></a>内存/虚存</h5><h5 id=\"CPU、内核\"><a href=\"#CPU、内核\" class=\"headerlink\" title=\"CPU、内核\"></a>CPU、内核</h5><h5 id=\"内核态\"><a href=\"#内核态\" class=\"headerlink\" title=\"内核态\"></a>内核态</h5><h5 id=\"用户态\"><a href=\"#用户态\" class=\"headerlink\" title=\"用户态\"></a>用户态</h5><h4 id=\"3-数据结构与算法\"><a href=\"#3-数据结构与算法\" class=\"headerlink\" title=\"3.数据结构与算法\"></a>3.数据结构与算法</h4><h5 id=\"十种排序：\"><a href=\"#十种排序：\" class=\"headerlink\" title=\"十种排序：\"></a>十种排序：</h5><h5 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h5><h5 id=\"堆排\"><a href=\"#堆排\" class=\"headerlink\" title=\"堆排\"></a>堆排</h5><h5 id=\"希尔\"><a href=\"#希尔\" class=\"headerlink\" title=\"希尔\"></a>希尔</h5><h5 id=\"冒泡\"><a href=\"#冒泡\" class=\"headerlink\" title=\"冒泡\"></a>冒泡</h5><h5 id=\"桶排\"><a href=\"#桶排\" class=\"headerlink\" title=\"桶排\"></a>桶排</h5><h5 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h5><h5 id=\"二叉树（反转二叉树）\"><a href=\"#二叉树（反转二叉树）\" class=\"headerlink\" title=\"二叉树（反转二叉树）\"></a>二叉树（反转二叉树）</h5><h5 id=\"平衡树-完全树-红黑树\"><a href=\"#平衡树-完全树-红黑树\" class=\"headerlink\" title=\"平衡树 完全树 红黑树\"></a>平衡树 完全树 红黑树</h5><h5 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h5><h5 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h5><h5 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h5><h4 id=\"4-mysql\"><a href=\"#4-mysql\" class=\"headerlink\" title=\"4.mysql\"></a>4.mysql</h4><h4 id=\"5-Redis\"><a href=\"#5-Redis\" class=\"headerlink\" title=\"5.Redis\"></a>5.Redis</h4><h5 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h5><h5 id=\"支持哪些应用\"><a href=\"#支持哪些应用\" class=\"headerlink\" title=\"支持哪些应用\"></a>支持哪些应用</h5><h4 id=\"6-消息队列-异步\"><a href=\"#6-消息队列-异步\" class=\"headerlink\" title=\"6.消息队列/异步\"></a>6.消息队列/异步</h4><h4 id=\"7-git用法（add、commit、push、pull、fetch）\"><a href=\"#7-git用法（add、commit、push、pull、fetch）\" class=\"headerlink\" title=\"7.git用法（add、commit、push、pull、fetch）\"></a>7.git用法（add、commit、push、pull、fetch）</h4><h4 id=\"8-通信协议\"><a href=\"#8-通信协议\" class=\"headerlink\" title=\"8.通信协议\"></a>8.通信协议</h4><h5 id=\"7层\"><a href=\"#7层\" class=\"headerlink\" title=\"7层\"></a>7层</h5><h5 id=\"TCP（三次、四次）\"><a href=\"#TCP（三次、四次）\" class=\"headerlink\" title=\"TCP（三次、四次）\"></a>TCP（三次、四次）</h5><h5 id=\"UBP\"><a href=\"#UBP\" class=\"headerlink\" title=\"UBP\"></a>UBP</h5><h4 id=\"9-持续集成\"><a href=\"#9-持续集成\" class=\"headerlink\" title=\"9.持续集成\"></a>9.持续集成</h4><h5 id=\"CI\"><a href=\"#CI\" class=\"headerlink\" title=\"CI\"></a>CI</h5><h5 id=\"Jckins\"><a href=\"#Jckins\" class=\"headerlink\" title=\"Jckins\"></a>Jckins</h5><h4 id=\"10-docker\"><a href=\"#10-docker\" class=\"headerlink\" title=\"10.docker\"></a>10.docker</h4>"},{"title":"观视频有感","date":"2019-12-08T04:33:44.000Z","_content":"\n​        这个周末观看了观视频工作室的直播。 感觉有必要写些什么记录一下。（周六场，袁老师<科技>，范老师<政治>，沙老师<企业家>，金政委<世界形势>，胡老师<媒体>）。\n\n​        首先记录一下，观视频是我近期发现的一个不错的渠道，通过里面的大佬带来对世界形势的解读，和之前的锵锵三人行挺像的。从中可以了解他们是怎么看待一些社会现象，并且对未来的一个形式预判。\n\n​        从昨天听的直播来看，不得不说事情都是复杂的，真的不能简单的一分为二来看，想寻找答案，也不是明明白白就能讲出来的，要不断再品味品味。\n\n​        1.袁老师的上午场，主要介绍了目前中国的科技状况，相较于国外，我们是有了很大进步的，在一些方面更是世界第一。我们要对自己的国家科研有信心，如果说有不足的，那就是我国在从1到∞的能力是很够的，其他国家的好东西我们国家只要开始研究了一定能超过他们。但是我国缺乏的是从0到1的创造力，每当我们国家在某方面追上了美国，美国又创造出新鲜的玩意儿，从核武器到互联网，我国的机会将是在第四次工业革命，第一次第二次工业革命，我国都没赶上，第三次赶上了，第四次很有可能成为引领改革的大国。\n\n​       2.范老师下午的关于政治制度的介绍，让我有耳目一新的感觉。他先是介绍了正负反馈机制，讲检察制度是正反馈，官僚机制会产生负反馈。西方是资本控制，我国是党领导。党是一股稳定的力量，有了党领导能有效带来中国继续发展。\n\n​       3.沙老师，说了富裕起来的企业家，应该考虑为什么社会做些什么。因为当年大家是签订了共同契约，交给共产党带领人民一起建设，有先富裕带动后富裕，最终实现共同富裕。但是目前，很多企业赚钱了，是靠着国企大力发展的基础设施上，才有了新的发展。因此应该回馈社会，做出公益等贡献。\n\n​       4.金政委。指出了一个现状，越来越多的人逐利去了金融行业，而真正需要人才的化工业人才稀缺，而第四次工业革命，很有可能是化工业、人工智能、可控核聚变等领域。另外，金政委告诉我们欧美、日本正处于衰老期，这是中国能超过那些国家的一个机会。\n\n​       5.胡老师，媒体也是两难的，既要敢于突破，又要慎重保持稳妥，要有分寸。\n\n​       6.陈老师，国家引入金融开放要分流，对于主动合作的要欢迎，对于恶意做空的要枪打出头鸟，要通过军事力量向其他国家证明，我们是有能力的，争夺一个定价权，类似美国对石油的把控。美国目前经济泡沫已经很大。\n\n1.到底讨论什么问题\n\n2.有什么新的吗\n\n3.为什么重要\n\n\n\n督工：\n\n张维为：英国要改变公投方式，不然容易联合王国分裂","source":"_posts/观视频有感.md","raw":"---\ntitle: 观视频有感\ndate: 2019-12-08 12:33:44\ncategories: 随笔\ntags: 待验证\n---\n\n​        这个周末观看了观视频工作室的直播。 感觉有必要写些什么记录一下。（周六场，袁老师<科技>，范老师<政治>，沙老师<企业家>，金政委<世界形势>，胡老师<媒体>）。\n\n​        首先记录一下，观视频是我近期发现的一个不错的渠道，通过里面的大佬带来对世界形势的解读，和之前的锵锵三人行挺像的。从中可以了解他们是怎么看待一些社会现象，并且对未来的一个形式预判。\n\n​        从昨天听的直播来看，不得不说事情都是复杂的，真的不能简单的一分为二来看，想寻找答案，也不是明明白白就能讲出来的，要不断再品味品味。\n\n​        1.袁老师的上午场，主要介绍了目前中国的科技状况，相较于国外，我们是有了很大进步的，在一些方面更是世界第一。我们要对自己的国家科研有信心，如果说有不足的，那就是我国在从1到∞的能力是很够的，其他国家的好东西我们国家只要开始研究了一定能超过他们。但是我国缺乏的是从0到1的创造力，每当我们国家在某方面追上了美国，美国又创造出新鲜的玩意儿，从核武器到互联网，我国的机会将是在第四次工业革命，第一次第二次工业革命，我国都没赶上，第三次赶上了，第四次很有可能成为引领改革的大国。\n\n​       2.范老师下午的关于政治制度的介绍，让我有耳目一新的感觉。他先是介绍了正负反馈机制，讲检察制度是正反馈，官僚机制会产生负反馈。西方是资本控制，我国是党领导。党是一股稳定的力量，有了党领导能有效带来中国继续发展。\n\n​       3.沙老师，说了富裕起来的企业家，应该考虑为什么社会做些什么。因为当年大家是签订了共同契约，交给共产党带领人民一起建设，有先富裕带动后富裕，最终实现共同富裕。但是目前，很多企业赚钱了，是靠着国企大力发展的基础设施上，才有了新的发展。因此应该回馈社会，做出公益等贡献。\n\n​       4.金政委。指出了一个现状，越来越多的人逐利去了金融行业，而真正需要人才的化工业人才稀缺，而第四次工业革命，很有可能是化工业、人工智能、可控核聚变等领域。另外，金政委告诉我们欧美、日本正处于衰老期，这是中国能超过那些国家的一个机会。\n\n​       5.胡老师，媒体也是两难的，既要敢于突破，又要慎重保持稳妥，要有分寸。\n\n​       6.陈老师，国家引入金融开放要分流，对于主动合作的要欢迎，对于恶意做空的要枪打出头鸟，要通过军事力量向其他国家证明，我们是有能力的，争夺一个定价权，类似美国对石油的把控。美国目前经济泡沫已经很大。\n\n1.到底讨论什么问题\n\n2.有什么新的吗\n\n3.为什么重要\n\n\n\n督工：\n\n张维为：英国要改变公投方式，不然容易联合王国分裂","slug":"观视频有感","published":1,"updated":"2019-12-12T01:19:18.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3v000jgisgqax7rjbk","content":"<p>​        这个周末观看了观视频工作室的直播。 感觉有必要写些什么记录一下。（周六场，袁老师&lt;科技&gt;，范老师&lt;政治&gt;，沙老师&lt;企业家&gt;，金政委&lt;世界形势&gt;，胡老师&lt;媒体&gt;）。</p>\n<p>​        首先记录一下，观视频是我近期发现的一个不错的渠道，通过里面的大佬带来对世界形势的解读，和之前的锵锵三人行挺像的。从中可以了解他们是怎么看待一些社会现象，并且对未来的一个形式预判。</p>\n<p>​        从昨天听的直播来看，不得不说事情都是复杂的，真的不能简单的一分为二来看，想寻找答案，也不是明明白白就能讲出来的，要不断再品味品味。</p>\n<p>​        1.袁老师的上午场，主要介绍了目前中国的科技状况，相较于国外，我们是有了很大进步的，在一些方面更是世界第一。我们要对自己的国家科研有信心，如果说有不足的，那就是我国在从1到∞的能力是很够的，其他国家的好东西我们国家只要开始研究了一定能超过他们。但是我国缺乏的是从0到1的创造力，每当我们国家在某方面追上了美国，美国又创造出新鲜的玩意儿，从核武器到互联网，我国的机会将是在第四次工业革命，第一次第二次工业革命，我国都没赶上，第三次赶上了，第四次很有可能成为引领改革的大国。</p>\n<p>​       2.范老师下午的关于政治制度的介绍，让我有耳目一新的感觉。他先是介绍了正负反馈机制，讲检察制度是正反馈，官僚机制会产生负反馈。西方是资本控制，我国是党领导。党是一股稳定的力量，有了党领导能有效带来中国继续发展。</p>\n<p>​       3.沙老师，说了富裕起来的企业家，应该考虑为什么社会做些什么。因为当年大家是签订了共同契约，交给共产党带领人民一起建设，有先富裕带动后富裕，最终实现共同富裕。但是目前，很多企业赚钱了，是靠着国企大力发展的基础设施上，才有了新的发展。因此应该回馈社会，做出公益等贡献。</p>\n<p>​       4.金政委。指出了一个现状，越来越多的人逐利去了金融行业，而真正需要人才的化工业人才稀缺，而第四次工业革命，很有可能是化工业、人工智能、可控核聚变等领域。另外，金政委告诉我们欧美、日本正处于衰老期，这是中国能超过那些国家的一个机会。</p>\n<p>​       5.胡老师，媒体也是两难的，既要敢于突破，又要慎重保持稳妥，要有分寸。</p>\n<p>​       6.陈老师，国家引入金融开放要分流，对于主动合作的要欢迎，对于恶意做空的要枪打出头鸟，要通过军事力量向其他国家证明，我们是有能力的，争夺一个定价权，类似美国对石油的把控。美国目前经济泡沫已经很大。</p>\n<p>1.到底讨论什么问题</p>\n<p>2.有什么新的吗</p>\n<p>3.为什么重要</p>\n<p>督工：</p>\n<p>张维为：英国要改变公投方式，不然容易联合王国分裂</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​        这个周末观看了观视频工作室的直播。 感觉有必要写些什么记录一下。（周六场，袁老师&lt;科技&gt;，范老师&lt;政治&gt;，沙老师&lt;企业家&gt;，金政委&lt;世界形势&gt;，胡老师&lt;媒体&gt;）。</p>\n<p>​        首先记录一下，观视频是我近期发现的一个不错的渠道，通过里面的大佬带来对世界形势的解读，和之前的锵锵三人行挺像的。从中可以了解他们是怎么看待一些社会现象，并且对未来的一个形式预判。</p>\n<p>​        从昨天听的直播来看，不得不说事情都是复杂的，真的不能简单的一分为二来看，想寻找答案，也不是明明白白就能讲出来的，要不断再品味品味。</p>\n<p>​        1.袁老师的上午场，主要介绍了目前中国的科技状况，相较于国外，我们是有了很大进步的，在一些方面更是世界第一。我们要对自己的国家科研有信心，如果说有不足的，那就是我国在从1到∞的能力是很够的，其他国家的好东西我们国家只要开始研究了一定能超过他们。但是我国缺乏的是从0到1的创造力，每当我们国家在某方面追上了美国，美国又创造出新鲜的玩意儿，从核武器到互联网，我国的机会将是在第四次工业革命，第一次第二次工业革命，我国都没赶上，第三次赶上了，第四次很有可能成为引领改革的大国。</p>\n<p>​       2.范老师下午的关于政治制度的介绍，让我有耳目一新的感觉。他先是介绍了正负反馈机制，讲检察制度是正反馈，官僚机制会产生负反馈。西方是资本控制，我国是党领导。党是一股稳定的力量，有了党领导能有效带来中国继续发展。</p>\n<p>​       3.沙老师，说了富裕起来的企业家，应该考虑为什么社会做些什么。因为当年大家是签订了共同契约，交给共产党带领人民一起建设，有先富裕带动后富裕，最终实现共同富裕。但是目前，很多企业赚钱了，是靠着国企大力发展的基础设施上，才有了新的发展。因此应该回馈社会，做出公益等贡献。</p>\n<p>​       4.金政委。指出了一个现状，越来越多的人逐利去了金融行业，而真正需要人才的化工业人才稀缺，而第四次工业革命，很有可能是化工业、人工智能、可控核聚变等领域。另外，金政委告诉我们欧美、日本正处于衰老期，这是中国能超过那些国家的一个机会。</p>\n<p>​       5.胡老师，媒体也是两难的，既要敢于突破，又要慎重保持稳妥，要有分寸。</p>\n<p>​       6.陈老师，国家引入金融开放要分流，对于主动合作的要欢迎，对于恶意做空的要枪打出头鸟，要通过军事力量向其他国家证明，我们是有能力的，争夺一个定价权，类似美国对石油的把控。美国目前经济泡沫已经很大。</p>\n<p>1.到底讨论什么问题</p>\n<p>2.有什么新的吗</p>\n<p>3.为什么重要</p>\n<p>督工：</p>\n<p>张维为：英国要改变公投方式，不然容易联合王国分裂</p>\n"},{"title":"烦恼","date":"2019-09-02T12:41:30.000Z","_content":"\n歌曲：小小少年(英俊少年插曲)\n歌手：未知 专辑：德国故事片《英俊少德国故事片英俊少年插曲》\n肖章译词\n李青慧记配\n\n小小少年,很少烦恼,\n眼望四周阳光照.\n小小少年,很少烦恼,\n但愿永远这样好.\n一年一年时间飞跑,\n小小少年在长高.\n随着岁月由小变大,\n他的烦恼增加了.\n小小少年,很少烦恼,\n无忧无虑乐陶陶.\n但有一天,风波突起,\n忧虑烦恼都到了.\n一年一年时间飞跑,\n小小少年在长高.\n随着岁月由小变大,\n他的烦恼增加了.","source":"_posts/烦恼.md","raw":"---\ntitle: 烦恼\ndate: 2019-09-02 20:41:30\ncategories: 随笔\ntags: \n- 心情\n---\n\n歌曲：小小少年(英俊少年插曲)\n歌手：未知 专辑：德国故事片《英俊少德国故事片英俊少年插曲》\n肖章译词\n李青慧记配\n\n小小少年,很少烦恼,\n眼望四周阳光照.\n小小少年,很少烦恼,\n但愿永远这样好.\n一年一年时间飞跑,\n小小少年在长高.\n随着岁月由小变大,\n他的烦恼增加了.\n小小少年,很少烦恼,\n无忧无虑乐陶陶.\n但有一天,风波突起,\n忧虑烦恼都到了.\n一年一年时间飞跑,\n小小少年在长高.\n随着岁月由小变大,\n他的烦恼增加了.","slug":"烦恼","published":1,"updated":"2019-09-02T14:32:24.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t3v000lgisg52jar186","content":"<p>歌曲：小小少年(英俊少年插曲)<br>歌手：未知 专辑：德国故事片《英俊少德国故事片英俊少年插曲》<br>肖章译词<br>李青慧记配</p>\n<p>小小少年,很少烦恼,<br>眼望四周阳光照.<br>小小少年,很少烦恼,<br>但愿永远这样好.<br>一年一年时间飞跑,<br>小小少年在长高.<br>随着岁月由小变大,<br>他的烦恼增加了.<br>小小少年,很少烦恼,<br>无忧无虑乐陶陶.<br>但有一天,风波突起,<br>忧虑烦恼都到了.<br>一年一年时间飞跑,<br>小小少年在长高.<br>随着岁月由小变大,<br>他的烦恼增加了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>歌曲：小小少年(英俊少年插曲)<br>歌手：未知 专辑：德国故事片《英俊少德国故事片英俊少年插曲》<br>肖章译词<br>李青慧记配</p>\n<p>小小少年,很少烦恼,<br>眼望四周阳光照.<br>小小少年,很少烦恼,<br>但愿永远这样好.<br>一年一年时间飞跑,<br>小小少年在长高.<br>随着岁月由小变大,<br>他的烦恼增加了.<br>小小少年,很少烦恼,<br>无忧无虑乐陶陶.<br>但有一天,风波突起,<br>忧虑烦恼都到了.<br>一年一年时间飞跑,<br>小小少年在长高.<br>随着岁月由小变大,<br>他的烦恼增加了.</p>\n"},{"title":"flask基础(一)","date":"2019-09-07T13:56:31.000Z","_content":"**flask优点：轻巧、可扩展性**\n\n### flask依赖\n\nflask的基础从它三个依赖说起。第一个是路由，调试和WSGI（web服务器网关接口）子系统，由[Werkzeug](https://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/)提供；第二个是模版系统由[Jinja2](http://docs.jinkan.org/docs/jinja2/)提供；第三个是命令行集成，由[Click](https://click-docs-zh-cn.readthedocs.io/zh/latest/)提供。这些依赖，是Flask开发者Armin Ronacher开发的。Flask原生不支持数据库访问、Web表单验证、用户身份验证等高级功能。这些功能以及其他大多数Web应用需要的核心服务都以扩展的形式实现，然后再与核心包集成。\n\n#### 路由及调试\n\n##### 一个完整的应用（路由的定义）\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')   #装饰器定义路由\ndef index():      #视图函数\n    return '<h1>Hello world</h1>'  #函数返回值为响应\n    \n@app.route('/user/<name>')   #动态路由\ndef user(name):\n    return '<h1>Hello,{}!</h1>'.format(name) #动态参数\n```\n\n##### 调试模式\n\nflask应用可以在调试模式中运行。在这个模式下会加载重载器和调试器。启用重载器后，Flask会监视项目的所有源码文件，发生变动时自动重启服务器，每次修改并保存源码文件后，服务器会自动重启，让改动生效。\n\n调试器是一个基于Web的工具，当应用抛出来未处理的异常时，它会出现在浏览器中，这时Web浏览器变成一个交互式栈跟踪，可以在里面审查源码，在调用栈的任何位置计算表达式。\n\n##### 启用服务器\n\n```\nexport FLASK_APP=hello.py\nexport FLASK_DEBUG=1\nflask run --host 0.0.0.0 --port 1234  \n# 任何计算机能通过http://a.b.c.d:5000访问Web服务器，其中a.b.c.d是运行服务器的计算机的IP地址。\n```\n\n##### 请求-响应循环\n\nFlask从客户端收到请求，要让视图函数能访问一些对象，这样才能处理请求。<u>请求对象</u>封装了客户端发送的HTTP请求。为避免大量参数把视图函数弄得混乱，Flask用上下文临时把某些对象变成全局可访问。\n\n##### 上下文全局变量\n\n| 变量名      | 上下文     | 说明                                                   |\n| :---------- | ---------- | ------------------------------------------------------ |\n| current_app | 应用上下文 | 当前应用的应用实例                                     |\n| g           | 应用上下文 | 处理请求时用作临时存储的对象，每次请求都会重设这个变量 |\n| request     | 请求上下文 | 请求对象，封装了客户端发出的HTTP请求中的内容           |\n| session     | 请求上下文 | 用户会话，值为一个字典，存储请求之间需要\"记住\"的值     |\n\n<u>Flask在分派请求之前激活（或推送）应用和请求上下文，请求处理完成后再将其删除。如果使用这些变量时没有激活上下文，会导致错误。获取应用上下文的方法是在应用实例上调用app.app_context()</u>\n\n```\nfrom hello import app\nfrom flask import current_app\napp_ctx = app.app_context()\napp_ctx.push()\nname = current_app.name  #'hello'\napp_ctx.pop()\n```\n\n##### 请求钩子\n\n有时在处理请求之前或之后执行代码。例如在请求开始时，需要创建数据库连接或者验证发起请求的用户身份。为了避免在每个视图函数中都重复编写代码，Flask提供了注册通用函数的功能。\n\n请求钩子通过装饰器实现。Flask支持4种钩子。\n\n- before_request   注册一个函数，在每次请求之前运行。\n- before_first_request  注册一个函数，只在处理第一个请求之前运行，可以用来添加服务器初始化任务。\n- after_request  注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。\n- teardown_request 注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。\n\n##### 响应\n\n响应就是一个简单的字符串，作为HTML页面回送客户端。但是HTTP响应中一个很重要的部分时状态码，Flask默认设为200，表面请求已被成功处理。如果视图函数返回的响应需要使用不同的状态码，可以把数字代码作为第二个返回值，添加到响应文本之后。如返回400状态码，表示请求无效。\n\n响应有个特殊的类型，称为重定向。重定向的状态码通常是302。Flask提供redirect()用于生成这样响应。还有种特殊的响应由abort()函数生成，用于处理错误。状态码是404。\n\n```\n@app.route('/')\ndef index():\n    return '<h1>Bad Request</h1>', 400\n```\n\n```\nfrom flask import redirect,abort\n@app.route('/')\ndef index():\nreturn redirect('http://www.example.com')\n\n@app.route('/user/<id>')\ndef get_user(id):\n    user = load_user(id)\n    if not user:\n        abort(404) # 注意，abort()不会把控制权交还给调用它的函数，而是抛出异常。\n    return '<h1>Hello, {}</h1>'.format(user.name）      \n```\n\n#### 模板\n\n模版是包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体值只在请求的上下文中才能知道。用真实值替换变量，再返回最终得到的响应字符串，这个过程称为渲染。\n\n##### 定义模板\n\n1.变量\n\nFlask使用一个名为Jinja2的强大模板引擎。模板使用的{{ name }}结构表示一个变量，这是一种特殊的占位符，告诉模板引擎这个位置的值从渲染模板时使用的数据中获取。Jinja2能识别所有类型的变量，如列表、字典和对象。\n\n```\n<p>A value from a dictionary: {{ mydict['key'] }}.</p>\n<p>A value from a list: {{ mylist[3] }}.</p>\n<p>A value from a list,with a variable index: {{ mylist[myintvar] }}.</p>\n<p>A value from an object's method: {{ myobj.somemethod() }}.</p>\n\n#变量值可以用过滤器修改。过滤器加在变量名之后，二者之间以竖线分隔。\nHello,{{ name|capitalize }} \n```\n\n2.控制结构\n\n```\n条件判断语句：\n{% if user %}\n    Hello, {{ user }}!\n{% else %}\n    Hello, Stranger!\n{% endif %}\n\nfor循环：\n<ul>\n    {% for comment in comments %}\n        <li>{{ comment }}</li>\n    {% endfor %}\n</ul>\n```\n\n多次重复使用模板代码的片段可以写入单独的文件，再引入所有模板中，以避免重复：\n\n```\n{% include 'common.html' %}\n```\n\n另一种重复使用代码的方式是模板继承。先创建一个base.html的基模板。基模板中定义的区块可在衍生模板中覆盖。\n\n```\n{% extends \"base.html\" %}\n```\n\nextends指令声明这个模板衍生自base.html。在extends指令之后，基模板的3个区块被重新定义，模板引擎会将其插入适当的位置。在衍生模板的区块里可以调用super()，引用基模板中同名区块里的内容。\n\n3.自定义错误页面\n\n```\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n```\n\n4.链接\n\nFlask提供了url_for()辅助函数，它使用应用的URL映射中保存的信息生成URL。url_for()的用法是以视图函数名作为参数，返回对应的URL。url_for('index')得到的结果是/，即应用的根URL。\n\n```\nurl_for('user',name='john',_external=True)返回结果是http://localhost:5000/user/john。\nurl_for('user',name='john',page=2,version=1)返回结果是/user/john?page=2&version=1。\n```\n\n##### 模板与静态文件\n\nFlask是在应用目录中的templates子目录里寻找模板。因此需要新建templates子目录，再把前面定义的模板保存在里面。\n\n```\nfrom flask import Flask,render_template\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/user/<name>')\ndef user(name):\n    return render_template('user.html', name=name)\n```\n\nFlask在应用根目录中名为static的子目录里寻找静态文件。因此需要新建static子目录。在URL映射时，有一个Flask为了支持静态文件自动添加的static路由，这个URL是/static/<filename>。\n\n```\n调用url_for('static',filename='css/style.css',_external=True)得到的结果是http://localhost:5000/static/css/style.css\n```\n\n```\n# base.html 定义收藏夹图标\n{% block head %}\n{{ super() }}\n<link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\"\n    type=\"image/x-icon\">\n{% endblock %}\n```\n\n##### 模板相关的扩展\n\n###### 1.Flask-Bootstrap\n\nBootstrap是Twitter开发的一个开源Web框架，是客户端框架。它提供的用户界面组件可用于创建整洁有吸引力的网页。\n\n```\nfrom flask_bootstrap import Bootstrap\n# ...\nbootstrap = Bootstrap(app)\n```\n\n###### 2.Flask-Moment\n\nMoment.js可以在浏览器中渲染日期和时间。\n\n```\n# 首先在base.html中引入Moment.js库\n{% block scripts %}\n{{ super() }}\n{{ moment.include_moment() }}\n{% endblock %}\n# 在index.html使用Flask-Moment渲染时间戳\n<P>The local date and time is {{ moment(current_time).format('LLL') }}.</p>\n<p>That was {{ moment(current_time).fromNow(refresh=True) }}</p>\n```\n\n在hello.py中初始化Flask-Moment\n\n```\nfrom flask_moment import Moment\nfrom datetime import datetime\nmoment = Moment(app)\n@app.route('/')\ndef index():\n    return render_template('index.html',current_time=datetime.utcnow())\n```\n\n","source":"_posts/flask基础(一).md","raw":"---\ntitle: flask基础(一)\ndate: 2019-09-07 21:56:31\ncategories: 技术\ntags: 基础\n\n---\n**flask优点：轻巧、可扩展性**\n\n### flask依赖\n\nflask的基础从它三个依赖说起。第一个是路由，调试和WSGI（web服务器网关接口）子系统，由[Werkzeug](https://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/)提供；第二个是模版系统由[Jinja2](http://docs.jinkan.org/docs/jinja2/)提供；第三个是命令行集成，由[Click](https://click-docs-zh-cn.readthedocs.io/zh/latest/)提供。这些依赖，是Flask开发者Armin Ronacher开发的。Flask原生不支持数据库访问、Web表单验证、用户身份验证等高级功能。这些功能以及其他大多数Web应用需要的核心服务都以扩展的形式实现，然后再与核心包集成。\n\n#### 路由及调试\n\n##### 一个完整的应用（路由的定义）\n\n```\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')   #装饰器定义路由\ndef index():      #视图函数\n    return '<h1>Hello world</h1>'  #函数返回值为响应\n    \n@app.route('/user/<name>')   #动态路由\ndef user(name):\n    return '<h1>Hello,{}!</h1>'.format(name) #动态参数\n```\n\n##### 调试模式\n\nflask应用可以在调试模式中运行。在这个模式下会加载重载器和调试器。启用重载器后，Flask会监视项目的所有源码文件，发生变动时自动重启服务器，每次修改并保存源码文件后，服务器会自动重启，让改动生效。\n\n调试器是一个基于Web的工具，当应用抛出来未处理的异常时，它会出现在浏览器中，这时Web浏览器变成一个交互式栈跟踪，可以在里面审查源码，在调用栈的任何位置计算表达式。\n\n##### 启用服务器\n\n```\nexport FLASK_APP=hello.py\nexport FLASK_DEBUG=1\nflask run --host 0.0.0.0 --port 1234  \n# 任何计算机能通过http://a.b.c.d:5000访问Web服务器，其中a.b.c.d是运行服务器的计算机的IP地址。\n```\n\n##### 请求-响应循环\n\nFlask从客户端收到请求，要让视图函数能访问一些对象，这样才能处理请求。<u>请求对象</u>封装了客户端发送的HTTP请求。为避免大量参数把视图函数弄得混乱，Flask用上下文临时把某些对象变成全局可访问。\n\n##### 上下文全局变量\n\n| 变量名      | 上下文     | 说明                                                   |\n| :---------- | ---------- | ------------------------------------------------------ |\n| current_app | 应用上下文 | 当前应用的应用实例                                     |\n| g           | 应用上下文 | 处理请求时用作临时存储的对象，每次请求都会重设这个变量 |\n| request     | 请求上下文 | 请求对象，封装了客户端发出的HTTP请求中的内容           |\n| session     | 请求上下文 | 用户会话，值为一个字典，存储请求之间需要\"记住\"的值     |\n\n<u>Flask在分派请求之前激活（或推送）应用和请求上下文，请求处理完成后再将其删除。如果使用这些变量时没有激活上下文，会导致错误。获取应用上下文的方法是在应用实例上调用app.app_context()</u>\n\n```\nfrom hello import app\nfrom flask import current_app\napp_ctx = app.app_context()\napp_ctx.push()\nname = current_app.name  #'hello'\napp_ctx.pop()\n```\n\n##### 请求钩子\n\n有时在处理请求之前或之后执行代码。例如在请求开始时，需要创建数据库连接或者验证发起请求的用户身份。为了避免在每个视图函数中都重复编写代码，Flask提供了注册通用函数的功能。\n\n请求钩子通过装饰器实现。Flask支持4种钩子。\n\n- before_request   注册一个函数，在每次请求之前运行。\n- before_first_request  注册一个函数，只在处理第一个请求之前运行，可以用来添加服务器初始化任务。\n- after_request  注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。\n- teardown_request 注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。\n\n##### 响应\n\n响应就是一个简单的字符串，作为HTML页面回送客户端。但是HTTP响应中一个很重要的部分时状态码，Flask默认设为200，表面请求已被成功处理。如果视图函数返回的响应需要使用不同的状态码，可以把数字代码作为第二个返回值，添加到响应文本之后。如返回400状态码，表示请求无效。\n\n响应有个特殊的类型，称为重定向。重定向的状态码通常是302。Flask提供redirect()用于生成这样响应。还有种特殊的响应由abort()函数生成，用于处理错误。状态码是404。\n\n```\n@app.route('/')\ndef index():\n    return '<h1>Bad Request</h1>', 400\n```\n\n```\nfrom flask import redirect,abort\n@app.route('/')\ndef index():\nreturn redirect('http://www.example.com')\n\n@app.route('/user/<id>')\ndef get_user(id):\n    user = load_user(id)\n    if not user:\n        abort(404) # 注意，abort()不会把控制权交还给调用它的函数，而是抛出异常。\n    return '<h1>Hello, {}</h1>'.format(user.name）      \n```\n\n#### 模板\n\n模版是包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体值只在请求的上下文中才能知道。用真实值替换变量，再返回最终得到的响应字符串，这个过程称为渲染。\n\n##### 定义模板\n\n1.变量\n\nFlask使用一个名为Jinja2的强大模板引擎。模板使用的{{ name }}结构表示一个变量，这是一种特殊的占位符，告诉模板引擎这个位置的值从渲染模板时使用的数据中获取。Jinja2能识别所有类型的变量，如列表、字典和对象。\n\n```\n<p>A value from a dictionary: {{ mydict['key'] }}.</p>\n<p>A value from a list: {{ mylist[3] }}.</p>\n<p>A value from a list,with a variable index: {{ mylist[myintvar] }}.</p>\n<p>A value from an object's method: {{ myobj.somemethod() }}.</p>\n\n#变量值可以用过滤器修改。过滤器加在变量名之后，二者之间以竖线分隔。\nHello,{{ name|capitalize }} \n```\n\n2.控制结构\n\n```\n条件判断语句：\n{% if user %}\n    Hello, {{ user }}!\n{% else %}\n    Hello, Stranger!\n{% endif %}\n\nfor循环：\n<ul>\n    {% for comment in comments %}\n        <li>{{ comment }}</li>\n    {% endfor %}\n</ul>\n```\n\n多次重复使用模板代码的片段可以写入单独的文件，再引入所有模板中，以避免重复：\n\n```\n{% include 'common.html' %}\n```\n\n另一种重复使用代码的方式是模板继承。先创建一个base.html的基模板。基模板中定义的区块可在衍生模板中覆盖。\n\n```\n{% extends \"base.html\" %}\n```\n\nextends指令声明这个模板衍生自base.html。在extends指令之后，基模板的3个区块被重新定义，模板引擎会将其插入适当的位置。在衍生模板的区块里可以调用super()，引用基模板中同名区块里的内容。\n\n3.自定义错误页面\n\n```\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n@app.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('500.html'), 500\n```\n\n4.链接\n\nFlask提供了url_for()辅助函数，它使用应用的URL映射中保存的信息生成URL。url_for()的用法是以视图函数名作为参数，返回对应的URL。url_for('index')得到的结果是/，即应用的根URL。\n\n```\nurl_for('user',name='john',_external=True)返回结果是http://localhost:5000/user/john。\nurl_for('user',name='john',page=2,version=1)返回结果是/user/john?page=2&version=1。\n```\n\n##### 模板与静态文件\n\nFlask是在应用目录中的templates子目录里寻找模板。因此需要新建templates子目录，再把前面定义的模板保存在里面。\n\n```\nfrom flask import Flask,render_template\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/user/<name>')\ndef user(name):\n    return render_template('user.html', name=name)\n```\n\nFlask在应用根目录中名为static的子目录里寻找静态文件。因此需要新建static子目录。在URL映射时，有一个Flask为了支持静态文件自动添加的static路由，这个URL是/static/<filename>。\n\n```\n调用url_for('static',filename='css/style.css',_external=True)得到的结果是http://localhost:5000/static/css/style.css\n```\n\n```\n# base.html 定义收藏夹图标\n{% block head %}\n{{ super() }}\n<link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\"\n    type=\"image/x-icon\">\n{% endblock %}\n```\n\n##### 模板相关的扩展\n\n###### 1.Flask-Bootstrap\n\nBootstrap是Twitter开发的一个开源Web框架，是客户端框架。它提供的用户界面组件可用于创建整洁有吸引力的网页。\n\n```\nfrom flask_bootstrap import Bootstrap\n# ...\nbootstrap = Bootstrap(app)\n```\n\n###### 2.Flask-Moment\n\nMoment.js可以在浏览器中渲染日期和时间。\n\n```\n# 首先在base.html中引入Moment.js库\n{% block scripts %}\n{{ super() }}\n{{ moment.include_moment() }}\n{% endblock %}\n# 在index.html使用Flask-Moment渲染时间戳\n<P>The local date and time is {{ moment(current_time).format('LLL') }}.</p>\n<p>That was {{ moment(current_time).fromNow(refresh=True) }}</p>\n```\n\n在hello.py中初始化Flask-Moment\n\n```\nfrom flask_moment import Moment\nfrom datetime import datetime\nmoment = Moment(app)\n@app.route('/')\ndef index():\n    return render_template('index.html',current_time=datetime.utcnow())\n```\n\n","slug":"flask基础(一)","published":1,"updated":"2019-09-09T09:32:39.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t4t0018gisgkkee8iqv","content":"<p><strong>flask优点：轻巧、可扩展性</strong></p>\n<h3 id=\"flask依赖\"><a href=\"#flask依赖\" class=\"headerlink\" title=\"flask依赖\"></a>flask依赖</h3><p>flask的基础从它三个依赖说起。第一个是路由，调试和WSGI（web服务器网关接口）子系统，由<a href=\"https://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">Werkzeug</a>提供；第二个是模版系统由<a href=\"http://docs.jinkan.org/docs/jinja2/\" target=\"_blank\" rel=\"noopener\">Jinja2</a>提供；第三个是命令行集成，由<a href=\"https://click-docs-zh-cn.readthedocs.io/zh/latest/\" target=\"_blank\" rel=\"noopener\">Click</a>提供。这些依赖，是Flask开发者Armin Ronacher开发的。Flask原生不支持数据库访问、Web表单验证、用户身份验证等高级功能。这些功能以及其他大多数Web应用需要的核心服务都以扩展的形式实现，然后再与核心包集成。</p>\n<h4 id=\"路由及调试\"><a href=\"#路由及调试\" class=\"headerlink\" title=\"路由及调试\"></a>路由及调试</h4><h5 id=\"一个完整的应用（路由的定义）\"><a href=\"#一个完整的应用（路由的定义）\" class=\"headerlink\" title=\"一个完整的应用（路由的定义）\"></a>一个完整的应用（路由的定义）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">@app.route(&apos;/&apos;)   #装饰器定义路由</span><br><span class=\"line\">def index():      #视图函数</span><br><span class=\"line\">    return &apos;&lt;h1&gt;Hello world&lt;/h1&gt;&apos;  #函数返回值为响应</span><br><span class=\"line\">    </span><br><span class=\"line\">@app.route(&apos;/user/&lt;name&gt;&apos;)   #动态路由</span><br><span class=\"line\">def user(name):</span><br><span class=\"line\">    return &apos;&lt;h1&gt;Hello,&#123;&#125;!&lt;/h1&gt;&apos;.format(name) #动态参数</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h5><p>flask应用可以在调试模式中运行。在这个模式下会加载重载器和调试器。启用重载器后，Flask会监视项目的所有源码文件，发生变动时自动重启服务器，每次修改并保存源码文件后，服务器会自动重启，让改动生效。</p>\n<p>调试器是一个基于Web的工具，当应用抛出来未处理的异常时，它会出现在浏览器中，这时Web浏览器变成一个交互式栈跟踪，可以在里面审查源码，在调用栈的任何位置计算表达式。</p>\n<h5 id=\"启用服务器\"><a href=\"#启用服务器\" class=\"headerlink\" title=\"启用服务器\"></a>启用服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export FLASK_APP=hello.py</span><br><span class=\"line\">export FLASK_DEBUG=1</span><br><span class=\"line\">flask run --host 0.0.0.0 --port 1234  </span><br><span class=\"line\"># 任何计算机能通过http://a.b.c.d:5000访问Web服务器，其中a.b.c.d是运行服务器的计算机的IP地址。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"请求-响应循环\"><a href=\"#请求-响应循环\" class=\"headerlink\" title=\"请求-响应循环\"></a>请求-响应循环</h5><p>Flask从客户端收到请求，要让视图函数能访问一些对象，这样才能处理请求。<u>请求对象</u>封装了客户端发送的HTTP请求。为避免大量参数把视图函数弄得混乱，Flask用上下文临时把某些对象变成全局可访问。</p>\n<h5 id=\"上下文全局变量\"><a href=\"#上下文全局变量\" class=\"headerlink\" title=\"上下文全局变量\"></a>上下文全局变量</h5><table>\n<thead>\n<tr>\n<th align=\"left\">变量名</th>\n<th>上下文</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">current_app</td>\n<td>应用上下文</td>\n<td>当前应用的应用实例</td>\n</tr>\n<tr>\n<td align=\"left\">g</td>\n<td>应用上下文</td>\n<td>处理请求时用作临时存储的对象，每次请求都会重设这个变量</td>\n</tr>\n<tr>\n<td align=\"left\">request</td>\n<td>请求上下文</td>\n<td>请求对象，封装了客户端发出的HTTP请求中的内容</td>\n</tr>\n<tr>\n<td align=\"left\">session</td>\n<td>请求上下文</td>\n<td>用户会话，值为一个字典，存储请求之间需要”记住”的值</td>\n</tr>\n</tbody></table>\n<p><u>Flask在分派请求之前激活（或推送）应用和请求上下文，请求处理完成后再将其删除。如果使用这些变量时没有激活上下文，会导致错误。获取应用上下文的方法是在应用实例上调用app.app_context()</u></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from hello import app</span><br><span class=\"line\">from flask import current_app</span><br><span class=\"line\">app_ctx = app.app_context()</span><br><span class=\"line\">app_ctx.push()</span><br><span class=\"line\">name = current_app.name  #&apos;hello&apos;</span><br><span class=\"line\">app_ctx.pop()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"请求钩子\"><a href=\"#请求钩子\" class=\"headerlink\" title=\"请求钩子\"></a>请求钩子</h5><p>有时在处理请求之前或之后执行代码。例如在请求开始时，需要创建数据库连接或者验证发起请求的用户身份。为了避免在每个视图函数中都重复编写代码，Flask提供了注册通用函数的功能。</p>\n<p>请求钩子通过装饰器实现。Flask支持4种钩子。</p>\n<ul>\n<li>before_request   注册一个函数，在每次请求之前运行。</li>\n<li>before_first_request  注册一个函数，只在处理第一个请求之前运行，可以用来添加服务器初始化任务。</li>\n<li>after_request  注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。</li>\n<li>teardown_request 注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。</li>\n</ul>\n<h5 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h5><p>响应就是一个简单的字符串，作为HTML页面回送客户端。但是HTTP响应中一个很重要的部分时状态码，Flask默认设为200，表面请求已被成功处理。如果视图函数返回的响应需要使用不同的状态码，可以把数字代码作为第二个返回值，添加到响应文本之后。如返回400状态码，表示请求无效。</p>\n<p>响应有个特殊的类型，称为重定向。重定向的状态码通常是302。Flask提供redirect()用于生成这样响应。还有种特殊的响应由abort()函数生成，用于处理错误。状态码是404。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&apos;/&apos;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    return &apos;&lt;h1&gt;Bad Request&lt;/h1&gt;&apos;, 400</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import redirect,abort</span><br><span class=\"line\">@app.route(&apos;/&apos;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">return redirect(&apos;http://www.example.com&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/user/&lt;id&gt;&apos;)</span><br><span class=\"line\">def get_user(id):</span><br><span class=\"line\">    user = load_user(id)</span><br><span class=\"line\">    if not user:</span><br><span class=\"line\">        abort(404) # 注意，abort()不会把控制权交还给调用它的函数，而是抛出异常。</span><br><span class=\"line\">    return &apos;&lt;h1&gt;Hello, &#123;&#125;&lt;/h1&gt;&apos;.format(user.name）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p>模版是包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体值只在请求的上下文中才能知道。用真实值替换变量，再返回最终得到的响应字符串，这个过程称为渲染。</p>\n<h5 id=\"定义模板\"><a href=\"#定义模板\" class=\"headerlink\" title=\"定义模板\"></a>定义模板</h5><p>1.变量</p>\n<p>Flask使用一个名为Jinja2的强大模板引擎。模板使用的结构表示一个变量，这是一种特殊的占位符，告诉模板引擎这个位置的值从渲染模板时使用的数据中获取。Jinja2能识别所有类型的变量，如列表、字典和对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;A value from a dictionary: &#123;&#123; mydict[&apos;key&apos;] &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;A value from a list: &#123;&#123; mylist[3] &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;A value from a list,with a variable index: &#123;&#123; mylist[myintvar] &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;A value from an object&apos;s method: &#123;&#123; myobj.somemethod() &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#变量值可以用过滤器修改。过滤器加在变量名之后，二者之间以竖线分隔。</span><br><span class=\"line\">Hello,&#123;&#123; name|capitalize &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.控制结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">条件判断语句：</span><br><span class=\"line\">&#123;% if user %&#125;</span><br><span class=\"line\">    Hello, &#123;&#123; user &#125;&#125;!</span><br><span class=\"line\">&#123;% else %&#125;</span><br><span class=\"line\">    Hello, Stranger!</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for循环：</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &#123;% for comment in comments %&#125;</span><br><span class=\"line\">        &lt;li&gt;&#123;&#123; comment &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>多次重复使用模板代码的片段可以写入单独的文件，再引入所有模板中，以避免重复：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &apos;common.html&apos; %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一种重复使用代码的方式是模板继承。先创建一个base.html的基模板。基模板中定义的区块可在衍生模板中覆盖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &quot;base.html&quot; %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>extends指令声明这个模板衍生自base.html。在extends指令之后，基模板的3个区块被重新定义，模板引擎会将其插入适当的位置。在衍生模板的区块里可以调用super()，引用基模板中同名区块里的内容。</p>\n<p>3.自定义错误页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.errorhandler(404)</span><br><span class=\"line\">def page_not_found(e):</span><br><span class=\"line\">    return render_template(&apos;404.html&apos;), 404</span><br><span class=\"line\">@app.errorhandler(500)</span><br><span class=\"line\">def internal_server_error(e):</span><br><span class=\"line\">    return render_template(&apos;500.html&apos;), 500</span><br></pre></td></tr></table></figure>\n\n<p>4.链接</p>\n<p>Flask提供了url_for()辅助函数，它使用应用的URL映射中保存的信息生成URL。url_for()的用法是以视图函数名作为参数，返回对应的URL。url_for(‘index’)得到的结果是/，即应用的根URL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(&apos;user&apos;,name=&apos;john&apos;,_external=True)返回结果是http://localhost:5000/user/john。</span><br><span class=\"line\">url_for(&apos;user&apos;,name=&apos;john&apos;,page=2,version=1)返回结果是/user/john?page=2&amp;version=1。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"模板与静态文件\"><a href=\"#模板与静态文件\" class=\"headerlink\" title=\"模板与静态文件\"></a>模板与静态文件</h5><p>Flask是在应用目录中的templates子目录里寻找模板。因此需要新建templates子目录，再把前面定义的模板保存在里面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,render_template</span><br><span class=\"line\">@app.route(&apos;/&apos;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/user/&lt;name&gt;&apos;)</span><br><span class=\"line\">def user(name):</span><br><span class=\"line\">    return render_template(&apos;user.html&apos;, name=name)</span><br></pre></td></tr></table></figure>\n\n<p>Flask在应用根目录中名为static的子目录里寻找静态文件。因此需要新建static子目录。在URL映射时，有一个Flask为了支持静态文件自动添加的static路由，这个URL是/static/<filename>。</filename></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用url_for(&apos;static&apos;,filename=&apos;css/style.css&apos;,_external=True)得到的结果是http://localhost:5000/static/css/style.css</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># base.html 定义收藏夹图标</span><br><span class=\"line\">&#123;% block head %&#125;</span><br><span class=\"line\">&#123;&#123; super() &#125;&#125;</span><br><span class=\"line\">&lt;link rel=&quot;shortcut icon&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;favicon.ico&apos;) &#125;&#125;&quot;</span><br><span class=\"line\">    type=&quot;image/x-icon&quot;&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"模板相关的扩展\"><a href=\"#模板相关的扩展\" class=\"headerlink\" title=\"模板相关的扩展\"></a>模板相关的扩展</h5><h6 id=\"1-Flask-Bootstrap\"><a href=\"#1-Flask-Bootstrap\" class=\"headerlink\" title=\"1.Flask-Bootstrap\"></a>1.Flask-Bootstrap</h6><p>Bootstrap是Twitter开发的一个开源Web框架，是客户端框架。它提供的用户界面组件可用于创建整洁有吸引力的网页。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_bootstrap import Bootstrap</span><br><span class=\"line\"># ...</span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-Flask-Moment\"><a href=\"#2-Flask-Moment\" class=\"headerlink\" title=\"2.Flask-Moment\"></a>2.Flask-Moment</h6><p>Moment.js可以在浏览器中渲染日期和时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先在base.html中引入Moment.js库</span><br><span class=\"line\">&#123;% block scripts %&#125;</span><br><span class=\"line\">&#123;&#123; super() &#125;&#125;</span><br><span class=\"line\">&#123;&#123; moment.include_moment() &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"># 在index.html使用Flask-Moment渲染时间戳</span><br><span class=\"line\">&lt;P&gt;The local date and time is &#123;&#123; moment(current_time).format(&apos;LLL&apos;) &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;That was &#123;&#123; moment(current_time).fromNow(refresh=True) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在hello.py中初始化Flask-Moment</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_moment import Moment</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\">moment = Moment(app)</span><br><span class=\"line\">@app.route(&apos;/&apos;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;,current_time=datetime.utcnow())</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>flask优点：轻巧、可扩展性</strong></p>\n<h3 id=\"flask依赖\"><a href=\"#flask依赖\" class=\"headerlink\" title=\"flask依赖\"></a>flask依赖</h3><p>flask的基础从它三个依赖说起。第一个是路由，调试和WSGI（web服务器网关接口）子系统，由<a href=\"https://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">Werkzeug</a>提供；第二个是模版系统由<a href=\"http://docs.jinkan.org/docs/jinja2/\" target=\"_blank\" rel=\"noopener\">Jinja2</a>提供；第三个是命令行集成，由<a href=\"https://click-docs-zh-cn.readthedocs.io/zh/latest/\" target=\"_blank\" rel=\"noopener\">Click</a>提供。这些依赖，是Flask开发者Armin Ronacher开发的。Flask原生不支持数据库访问、Web表单验证、用户身份验证等高级功能。这些功能以及其他大多数Web应用需要的核心服务都以扩展的形式实现，然后再与核心包集成。</p>\n<h4 id=\"路由及调试\"><a href=\"#路由及调试\" class=\"headerlink\" title=\"路由及调试\"></a>路由及调试</h4><h5 id=\"一个完整的应用（路由的定义）\"><a href=\"#一个完整的应用（路由的定义）\" class=\"headerlink\" title=\"一个完整的应用（路由的定义）\"></a>一个完整的应用（路由的定义）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">@app.route(&apos;/&apos;)   #装饰器定义路由</span><br><span class=\"line\">def index():      #视图函数</span><br><span class=\"line\">    return &apos;&lt;h1&gt;Hello world&lt;/h1&gt;&apos;  #函数返回值为响应</span><br><span class=\"line\">    </span><br><span class=\"line\">@app.route(&apos;/user/&lt;name&gt;&apos;)   #动态路由</span><br><span class=\"line\">def user(name):</span><br><span class=\"line\">    return &apos;&lt;h1&gt;Hello,&#123;&#125;!&lt;/h1&gt;&apos;.format(name) #动态参数</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h5><p>flask应用可以在调试模式中运行。在这个模式下会加载重载器和调试器。启用重载器后，Flask会监视项目的所有源码文件，发生变动时自动重启服务器，每次修改并保存源码文件后，服务器会自动重启，让改动生效。</p>\n<p>调试器是一个基于Web的工具，当应用抛出来未处理的异常时，它会出现在浏览器中，这时Web浏览器变成一个交互式栈跟踪，可以在里面审查源码，在调用栈的任何位置计算表达式。</p>\n<h5 id=\"启用服务器\"><a href=\"#启用服务器\" class=\"headerlink\" title=\"启用服务器\"></a>启用服务器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export FLASK_APP=hello.py</span><br><span class=\"line\">export FLASK_DEBUG=1</span><br><span class=\"line\">flask run --host 0.0.0.0 --port 1234  </span><br><span class=\"line\"># 任何计算机能通过http://a.b.c.d:5000访问Web服务器，其中a.b.c.d是运行服务器的计算机的IP地址。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"请求-响应循环\"><a href=\"#请求-响应循环\" class=\"headerlink\" title=\"请求-响应循环\"></a>请求-响应循环</h5><p>Flask从客户端收到请求，要让视图函数能访问一些对象，这样才能处理请求。<u>请求对象</u>封装了客户端发送的HTTP请求。为避免大量参数把视图函数弄得混乱，Flask用上下文临时把某些对象变成全局可访问。</p>\n<h5 id=\"上下文全局变量\"><a href=\"#上下文全局变量\" class=\"headerlink\" title=\"上下文全局变量\"></a>上下文全局变量</h5><table>\n<thead>\n<tr>\n<th align=\"left\">变量名</th>\n<th>上下文</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">current_app</td>\n<td>应用上下文</td>\n<td>当前应用的应用实例</td>\n</tr>\n<tr>\n<td align=\"left\">g</td>\n<td>应用上下文</td>\n<td>处理请求时用作临时存储的对象，每次请求都会重设这个变量</td>\n</tr>\n<tr>\n<td align=\"left\">request</td>\n<td>请求上下文</td>\n<td>请求对象，封装了客户端发出的HTTP请求中的内容</td>\n</tr>\n<tr>\n<td align=\"left\">session</td>\n<td>请求上下文</td>\n<td>用户会话，值为一个字典，存储请求之间需要”记住”的值</td>\n</tr>\n</tbody></table>\n<p><u>Flask在分派请求之前激活（或推送）应用和请求上下文，请求处理完成后再将其删除。如果使用这些变量时没有激活上下文，会导致错误。获取应用上下文的方法是在应用实例上调用app.app_context()</u></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from hello import app</span><br><span class=\"line\">from flask import current_app</span><br><span class=\"line\">app_ctx = app.app_context()</span><br><span class=\"line\">app_ctx.push()</span><br><span class=\"line\">name = current_app.name  #&apos;hello&apos;</span><br><span class=\"line\">app_ctx.pop()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"请求钩子\"><a href=\"#请求钩子\" class=\"headerlink\" title=\"请求钩子\"></a>请求钩子</h5><p>有时在处理请求之前或之后执行代码。例如在请求开始时，需要创建数据库连接或者验证发起请求的用户身份。为了避免在每个视图函数中都重复编写代码，Flask提供了注册通用函数的功能。</p>\n<p>请求钩子通过装饰器实现。Flask支持4种钩子。</p>\n<ul>\n<li>before_request   注册一个函数，在每次请求之前运行。</li>\n<li>before_first_request  注册一个函数，只在处理第一个请求之前运行，可以用来添加服务器初始化任务。</li>\n<li>after_request  注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。</li>\n<li>teardown_request 注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。</li>\n</ul>\n<h5 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h5><p>响应就是一个简单的字符串，作为HTML页面回送客户端。但是HTTP响应中一个很重要的部分时状态码，Flask默认设为200，表面请求已被成功处理。如果视图函数返回的响应需要使用不同的状态码，可以把数字代码作为第二个返回值，添加到响应文本之后。如返回400状态码，表示请求无效。</p>\n<p>响应有个特殊的类型，称为重定向。重定向的状态码通常是302。Flask提供redirect()用于生成这样响应。还有种特殊的响应由abort()函数生成，用于处理错误。状态码是404。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&apos;/&apos;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    return &apos;&lt;h1&gt;Bad Request&lt;/h1&gt;&apos;, 400</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import redirect,abort</span><br><span class=\"line\">@app.route(&apos;/&apos;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">return redirect(&apos;http://www.example.com&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/user/&lt;id&gt;&apos;)</span><br><span class=\"line\">def get_user(id):</span><br><span class=\"line\">    user = load_user(id)</span><br><span class=\"line\">    if not user:</span><br><span class=\"line\">        abort(404) # 注意，abort()不会把控制权交还给调用它的函数，而是抛出异常。</span><br><span class=\"line\">    return &apos;&lt;h1&gt;Hello, &#123;&#125;&lt;/h1&gt;&apos;.format(user.name）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p>模版是包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体值只在请求的上下文中才能知道。用真实值替换变量，再返回最终得到的响应字符串，这个过程称为渲染。</p>\n<h5 id=\"定义模板\"><a href=\"#定义模板\" class=\"headerlink\" title=\"定义模板\"></a>定义模板</h5><p>1.变量</p>\n<p>Flask使用一个名为Jinja2的强大模板引擎。模板使用的结构表示一个变量，这是一种特殊的占位符，告诉模板引擎这个位置的值从渲染模板时使用的数据中获取。Jinja2能识别所有类型的变量，如列表、字典和对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;A value from a dictionary: &#123;&#123; mydict[&apos;key&apos;] &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;A value from a list: &#123;&#123; mylist[3] &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;A value from a list,with a variable index: &#123;&#123; mylist[myintvar] &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;A value from an object&apos;s method: &#123;&#123; myobj.somemethod() &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#变量值可以用过滤器修改。过滤器加在变量名之后，二者之间以竖线分隔。</span><br><span class=\"line\">Hello,&#123;&#123; name|capitalize &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.控制结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">条件判断语句：</span><br><span class=\"line\">&#123;% if user %&#125;</span><br><span class=\"line\">    Hello, &#123;&#123; user &#125;&#125;!</span><br><span class=\"line\">&#123;% else %&#125;</span><br><span class=\"line\">    Hello, Stranger!</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for循环：</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &#123;% for comment in comments %&#125;</span><br><span class=\"line\">        &lt;li&gt;&#123;&#123; comment &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>多次重复使用模板代码的片段可以写入单独的文件，再引入所有模板中，以避免重复：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &apos;common.html&apos; %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一种重复使用代码的方式是模板继承。先创建一个base.html的基模板。基模板中定义的区块可在衍生模板中覆盖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &quot;base.html&quot; %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>extends指令声明这个模板衍生自base.html。在extends指令之后，基模板的3个区块被重新定义，模板引擎会将其插入适当的位置。在衍生模板的区块里可以调用super()，引用基模板中同名区块里的内容。</p>\n<p>3.自定义错误页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.errorhandler(404)</span><br><span class=\"line\">def page_not_found(e):</span><br><span class=\"line\">    return render_template(&apos;404.html&apos;), 404</span><br><span class=\"line\">@app.errorhandler(500)</span><br><span class=\"line\">def internal_server_error(e):</span><br><span class=\"line\">    return render_template(&apos;500.html&apos;), 500</span><br></pre></td></tr></table></figure>\n\n<p>4.链接</p>\n<p>Flask提供了url_for()辅助函数，它使用应用的URL映射中保存的信息生成URL。url_for()的用法是以视图函数名作为参数，返回对应的URL。url_for(‘index’)得到的结果是/，即应用的根URL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(&apos;user&apos;,name=&apos;john&apos;,_external=True)返回结果是http://localhost:5000/user/john。</span><br><span class=\"line\">url_for(&apos;user&apos;,name=&apos;john&apos;,page=2,version=1)返回结果是/user/john?page=2&amp;version=1。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"模板与静态文件\"><a href=\"#模板与静态文件\" class=\"headerlink\" title=\"模板与静态文件\"></a>模板与静态文件</h5><p>Flask是在应用目录中的templates子目录里寻找模板。因此需要新建templates子目录，再把前面定义的模板保存在里面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,render_template</span><br><span class=\"line\">@app.route(&apos;/&apos;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/user/&lt;name&gt;&apos;)</span><br><span class=\"line\">def user(name):</span><br><span class=\"line\">    return render_template(&apos;user.html&apos;, name=name)</span><br></pre></td></tr></table></figure>\n\n<p>Flask在应用根目录中名为static的子目录里寻找静态文件。因此需要新建static子目录。在URL映射时，有一个Flask为了支持静态文件自动添加的static路由，这个URL是/static/<filename>。</filename></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用url_for(&apos;static&apos;,filename=&apos;css/style.css&apos;,_external=True)得到的结果是http://localhost:5000/static/css/style.css</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># base.html 定义收藏夹图标</span><br><span class=\"line\">&#123;% block head %&#125;</span><br><span class=\"line\">&#123;&#123; super() &#125;&#125;</span><br><span class=\"line\">&lt;link rel=&quot;shortcut icon&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;favicon.ico&apos;) &#125;&#125;&quot;</span><br><span class=\"line\">    type=&quot;image/x-icon&quot;&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"模板相关的扩展\"><a href=\"#模板相关的扩展\" class=\"headerlink\" title=\"模板相关的扩展\"></a>模板相关的扩展</h5><h6 id=\"1-Flask-Bootstrap\"><a href=\"#1-Flask-Bootstrap\" class=\"headerlink\" title=\"1.Flask-Bootstrap\"></a>1.Flask-Bootstrap</h6><p>Bootstrap是Twitter开发的一个开源Web框架，是客户端框架。它提供的用户界面组件可用于创建整洁有吸引力的网页。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_bootstrap import Bootstrap</span><br><span class=\"line\"># ...</span><br><span class=\"line\">bootstrap = Bootstrap(app)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-Flask-Moment\"><a href=\"#2-Flask-Moment\" class=\"headerlink\" title=\"2.Flask-Moment\"></a>2.Flask-Moment</h6><p>Moment.js可以在浏览器中渲染日期和时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先在base.html中引入Moment.js库</span><br><span class=\"line\">&#123;% block scripts %&#125;</span><br><span class=\"line\">&#123;&#123; super() &#125;&#125;</span><br><span class=\"line\">&#123;&#123; moment.include_moment() &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"># 在index.html使用Flask-Moment渲染时间戳</span><br><span class=\"line\">&lt;P&gt;The local date and time is &#123;&#123; moment(current_time).format(&apos;LLL&apos;) &#125;&#125;.&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;That was &#123;&#123; moment(current_time).fromNow(refresh=True) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在hello.py中初始化Flask-Moment</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_moment import Moment</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\">moment = Moment(app)</span><br><span class=\"line\">@app.route(&apos;/&apos;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;,current_time=datetime.utcnow())</span><br></pre></td></tr></table></figure>\n\n"},{"title":"flask基础(二)","date":"2019-09-13T13:35:25.000Z","_content":"\n**中秋快乐**\n\n### flask扩展\n\n这篇主要介绍三个扩展，在flask应用中，这三个扩展是非常具有实用性的。第一个是Web表单；第二个是数据库；第三个是电子邮件。\n\n#### Web表单（FLASK-WTF）\n\n信息除了从服务器流向用户，还需要把用户提供的数据交给服务器来处理。Flask-WTF扩展对独立的WTForms包进行了包装，方便集成到Flask应用中。\n\n##### 配置\n\n```\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'dan yuan ren chang jiu'\n```\n\n##### 定义表单类—>在视图函数中处理表单—>把表单渲染成HTML\n\n```\n#定义表单类\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField,SubmitField\nfrom wtforms.validators import DataRequired\n\nclass NameForm(FlaskForm):\n    name = StringField('what is your name?',validators=[DataRequired()])\n    submit = SubmitField('Submit')\n    \n#在视图中处理表单\n@app.route('/', method=['GET','POST'])\ndef index():\n    name = None\n    form = NameForm()\n    if form.validate_on_submit():\n        name = form.name.data\n        form.name.data = ''\n    return render_template('index.html',form=form,name=name)\n‘’‘\n首次访问应用时，服务器会收到一个没有表单数据的GET请求，所以if语句的内容会被跳过，会直接渲染模板，并将值为None的name变量作为参数。用户看到的浏览器显示了一个为空的表单。当用户提交表单后，服务器会收到一个包含数据的POST请求，if后面的不为空验证函数通过后，用户输入的名字可以通过字段的data属性获取，再把data属性设为空字符串，清空表单字段。再次渲染表单时，各字段没有内容。最后渲染模板，name参数的值为表单中输入的名字。\n‘’‘\n\n#把表单渲染成HTML\n<form method='POST'>\n    {{ form.hidden_tag() }}\n    {{ form.name.label }} {{ form.name(id='my-text-field') }}\n    {{ form.submit() }}\n</form>\n#表单的form.hidden_tag()元素生成一个隐藏的字段，供Flask-WTF的CSRF防护机制使用。\n‘’‘\nFlask-Bootstrap扩展提供了高层级的辅助函数，可以使用Bootstrap预定义的表单样式渲染整个Flask-WTF表单，只需调用一次即可。\n’‘’\n{% import \"bootstrap/wtf.html\" as wtf %}\n{{ wtf.quick_form(form) }}\n```\n\n##### 重定向和用户会话\n\n```\nfrom flask import Flask,render_template,session,redirect,url_for\n\n@app.route('/',methods=['GET','POST'])\ndef index():\n    form = NameForm\n    if form.validate_on_submit():\n        session['name'] = form.name.data\n        return redirect(url_for('index'))\n    return render_template('index.html',form=form,name=session.get('name'))\n#变量name保存在用户会话中，以便在请求间记住数据。用户会话时一种私有存储，每个连接到服务器的客户端都可以访问。\n‘’‘\n最后是使视图函数调用redirect()函数，这是Flask提供的辅助函数，用于生成HTTP重定向响应。它的参数是重定向的URL，这里使用的是应用的根URL，可以写成redirect('/')，不过上面使用了URL生成函数url_for()。url_for()函数的第一个且唯一必须指定的参数是端点名，即路由的内部名称。默认情况下，路由的端点是相应视图函数的名称。\n最后使用get()获取字典中键对应的值，可以避免未找到键时抛出异常。如果指定的键不存在，则get()方法返回默认值None。\n‘’‘\n```\n\n##### 闪现消息\n\n当用户提交有一项错误的登陆表单后，服务器发回的响应重新渲染登陆表单，并在表单上面显示消息，flash()函数可以实现这种效果。\n\n```\nfrom flask import Flask,render_template,session,redirect,url_for,flash\n\n@app.route('/', methods=['GET','POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        old_name = session.get('name')\n        if old_name is not None and old_name != form.name.data:\n            flash('Looks like you have changed your name!')\n        session['name'] = form.name.data\n        return redirect(url_for('index'))\n    return render_template('index.html',form = form,name = session.get('name'))\n```\n\n调用flash()函数不能把消息显示出来，应用的模板还要渲染这些消息。最好在基模板中渲染消息，因为这样所有的页面都能显示需要显示的消息。Flask把get_flashed_message()函数开放给模板，用于获取并渲染闪现消息。\n\n```\n{% block content %}\n<div class=\"container\">\n    {% for message in get_flash_messages() %}\n    <div class=\"alert alert-warning\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</buttom>\n        {{ message }}\n    </div>\n    {% endfor %}\n    \n    {% block page_content %}{% endblock%}\n</div>\n{% endblock %}\n‘’‘\n这里使用了循环，在之前的请求循环中每次调用flash()函数时都会生成一个消息，所以可能有多个消息在排队等待显示。get_flashed_messages()函数获取的消息在下次调用时不会再次返回，闪现消息只显示一次就消失。\n’‘’\n```\n\n#### 数据库\n\n数据库按照一定规则保存应用的数据，应用再发起查询，取回所需的数据。Web应用最常使用基于关系模型的数据库，称为SQL数据库，使用结构化查询语言。近年来开始流行**文档数据库**和**键-值对数据库**，合称NoSQL数据库。\n\nORM：对象关系映射器，把高层的面向对象操作转换成低层的数据库指令。\n\nSQLAlchemy是一个强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用数据库原生SQL的低层功能。Flask-SQLAlchemy是一个Flask扩展，简化了在Flask应用中使用SQLAlchemy的操作。\n\n##### 配置数据库\n\n| 数据库引擎 | URL                                              |\n| :--------- | ------------------------------------------------ |\n| MySQL      | mysql://username:password@hostname/database      |\n| Postgres   | postgresql://username:password@hostname/database |\n| SQLite     | sqlite:////absolute/path/to/database             |\n\nhostname表示数据库服务所在的主机，可以是本地主机，也可以是远程服务器。数据库服务器上可以托管多个数据库，因此需要database表示要使用的数据库名。\n\n```\n# 以mysql为例\nfrom flask_sqlalchemy import SQLAlchemy\nimport pymysql\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:password@127.0.0.1/database'\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"SECRET_KEY\"] = \"dan yuan ren chang jiu\"\ndb = SQLAlchemy(app)\n```\n\n##### 定义模型\n\n```\n# 定义Role和User模型\nclass Role(db.Model):\n    __tablename__ = 'roles'\n    id = db.Column(db.Integer,primary_key=True)\n    name = db.Column(db.String(64),unique=True)\n    users = db.relationship('User',backref='role')\n    \n    def __repr__(self):\n        return '<Role %r>' % self.name\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, index=True)\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))# 外键，这列的值是相应的Role的id值\n    \n    def __repr__(self):\n        return '<User %r>' % self.username\n‘’‘\n类变量__tablename__定义在数据库中使用的表名。其余的类变量都是该模型的属性，定义为db.Column类的实例。\n两个模型定义了__repr()__方法，返回一个具有可读性的字符串表示模型，供调试和测试使用。\ndb.relationship()中的backref参数向User模型中添加一个role属性，从而定义反向关系。通过User实例的这个属性可以获取对应的Role模型对象，而不用再通过role_id外键获取。\n‘’‘\n\n```\n\n#####  数据库操作（增删改查）\n\n###### 创建表\n\n```\nfrom hello import db\ndb.drop_all()\ndb.create_all()\n```\n\n如果数据库表已经存在数据库，create_all()不会重新创建或更新相应的表。如果修改模型后要把改动应用到现有的数据库中，暴力方式是先删除旧表再重新创建。\n\n###### 插入行\n\n```\nfrom hello import Role, User\nadmin_role = Role(name = 'Admin')\nmod_role = Role(name = 'Modertor')\nuser_role = Role(name = 'User')\n\nuser_john = User(username='john', role=admin_role)\nuser_susan = User(username='susan', role=user_role)\nuser_david = User(username='david', role=user_role)\n\ndb.session.add_all([admin_role, mod_role, user_role, user_john, user_susan, user_david])\n#对数据库的改动通过数据库会话管理，会话由db.session表示。先添加到会话中，再调用commit()方法提交会话。\ndb.session.commit()\n```\n\n###### 删除行\n\n```\ndb.session.delete(mod_role)\ndb.session.commit()\n```\n\n###### 修改行\n\n```\nadmin_role.name = 'Administrator'\ndb.session.add(admin_role)\ndb.session.commit()\n```\n\n###### 查询行\n\nFlask-SQLAlchemy为每个模型类都提供了query对象。最基本的模型查询是使用all()方法取回对应表中的所有记录。\n\n```\nRole.query.all()\nUser.query.all()\n# 使用过滤器可以配置query对象进行更精确的数据库查询。\nUser.query.filter_by(role=user_role).all()\nuser_role = Role.query.filter_by(name='User').first() #first()方法只返回第一个结果\n```\n\n##### 在视图函数中操作数据库\n\n```\n@app.route('/', methods=['GET','POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.name.data).first()\n        if user is None:\n            user = User(username=form.name.data)\n            db.session.add(user)\n            db.session.commit()\n            session['known'] = False\n        else:\n            session['known'] = True\n        session['name'] = form.name.data\n        form.name.data = ''\n        return redirect(url_for('index'))\n    return render_template('index.html', form=form, name=session.get('name'), known=session.get('known', False))\n```\n\n对应的模板可以进一步修改，对已知用户和新用户，显示不同的内容。\n\n```\n{% extends \"base.html\" %}\n{% import \"bootstrap/wtf.html\" as wtf %}\n\n{% block title %}Flasky{% endblock %}\n\n{% block page_content %}\n<div class=\"page-header\">\n    <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1>\n    {% if not known %}\n    <p>Pleased to meet you!</p>\n    {% else %}\n    <p>Happy to see you again!</p>\n    {% endif %}\n</div>\n{{ wtf.quick_form(form) }}\n{% endblock %}\n```\n\n","source":"_posts/flask基础(二.)md.md","raw":"---\ntitle: flask基础(二)\ndate: 2019-09-13 21:35:25\ncategories: 技术\ntags: 基础\n---\n\n**中秋快乐**\n\n### flask扩展\n\n这篇主要介绍三个扩展，在flask应用中，这三个扩展是非常具有实用性的。第一个是Web表单；第二个是数据库；第三个是电子邮件。\n\n#### Web表单（FLASK-WTF）\n\n信息除了从服务器流向用户，还需要把用户提供的数据交给服务器来处理。Flask-WTF扩展对独立的WTForms包进行了包装，方便集成到Flask应用中。\n\n##### 配置\n\n```\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'dan yuan ren chang jiu'\n```\n\n##### 定义表单类—>在视图函数中处理表单—>把表单渲染成HTML\n\n```\n#定义表单类\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField,SubmitField\nfrom wtforms.validators import DataRequired\n\nclass NameForm(FlaskForm):\n    name = StringField('what is your name?',validators=[DataRequired()])\n    submit = SubmitField('Submit')\n    \n#在视图中处理表单\n@app.route('/', method=['GET','POST'])\ndef index():\n    name = None\n    form = NameForm()\n    if form.validate_on_submit():\n        name = form.name.data\n        form.name.data = ''\n    return render_template('index.html',form=form,name=name)\n‘’‘\n首次访问应用时，服务器会收到一个没有表单数据的GET请求，所以if语句的内容会被跳过，会直接渲染模板，并将值为None的name变量作为参数。用户看到的浏览器显示了一个为空的表单。当用户提交表单后，服务器会收到一个包含数据的POST请求，if后面的不为空验证函数通过后，用户输入的名字可以通过字段的data属性获取，再把data属性设为空字符串，清空表单字段。再次渲染表单时，各字段没有内容。最后渲染模板，name参数的值为表单中输入的名字。\n‘’‘\n\n#把表单渲染成HTML\n<form method='POST'>\n    {{ form.hidden_tag() }}\n    {{ form.name.label }} {{ form.name(id='my-text-field') }}\n    {{ form.submit() }}\n</form>\n#表单的form.hidden_tag()元素生成一个隐藏的字段，供Flask-WTF的CSRF防护机制使用。\n‘’‘\nFlask-Bootstrap扩展提供了高层级的辅助函数，可以使用Bootstrap预定义的表单样式渲染整个Flask-WTF表单，只需调用一次即可。\n’‘’\n{% import \"bootstrap/wtf.html\" as wtf %}\n{{ wtf.quick_form(form) }}\n```\n\n##### 重定向和用户会话\n\n```\nfrom flask import Flask,render_template,session,redirect,url_for\n\n@app.route('/',methods=['GET','POST'])\ndef index():\n    form = NameForm\n    if form.validate_on_submit():\n        session['name'] = form.name.data\n        return redirect(url_for('index'))\n    return render_template('index.html',form=form,name=session.get('name'))\n#变量name保存在用户会话中，以便在请求间记住数据。用户会话时一种私有存储，每个连接到服务器的客户端都可以访问。\n‘’‘\n最后是使视图函数调用redirect()函数，这是Flask提供的辅助函数，用于生成HTTP重定向响应。它的参数是重定向的URL，这里使用的是应用的根URL，可以写成redirect('/')，不过上面使用了URL生成函数url_for()。url_for()函数的第一个且唯一必须指定的参数是端点名，即路由的内部名称。默认情况下，路由的端点是相应视图函数的名称。\n最后使用get()获取字典中键对应的值，可以避免未找到键时抛出异常。如果指定的键不存在，则get()方法返回默认值None。\n‘’‘\n```\n\n##### 闪现消息\n\n当用户提交有一项错误的登陆表单后，服务器发回的响应重新渲染登陆表单，并在表单上面显示消息，flash()函数可以实现这种效果。\n\n```\nfrom flask import Flask,render_template,session,redirect,url_for,flash\n\n@app.route('/', methods=['GET','POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        old_name = session.get('name')\n        if old_name is not None and old_name != form.name.data:\n            flash('Looks like you have changed your name!')\n        session['name'] = form.name.data\n        return redirect(url_for('index'))\n    return render_template('index.html',form = form,name = session.get('name'))\n```\n\n调用flash()函数不能把消息显示出来，应用的模板还要渲染这些消息。最好在基模板中渲染消息，因为这样所有的页面都能显示需要显示的消息。Flask把get_flashed_message()函数开放给模板，用于获取并渲染闪现消息。\n\n```\n{% block content %}\n<div class=\"container\">\n    {% for message in get_flash_messages() %}\n    <div class=\"alert alert-warning\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</buttom>\n        {{ message }}\n    </div>\n    {% endfor %}\n    \n    {% block page_content %}{% endblock%}\n</div>\n{% endblock %}\n‘’‘\n这里使用了循环，在之前的请求循环中每次调用flash()函数时都会生成一个消息，所以可能有多个消息在排队等待显示。get_flashed_messages()函数获取的消息在下次调用时不会再次返回，闪现消息只显示一次就消失。\n’‘’\n```\n\n#### 数据库\n\n数据库按照一定规则保存应用的数据，应用再发起查询，取回所需的数据。Web应用最常使用基于关系模型的数据库，称为SQL数据库，使用结构化查询语言。近年来开始流行**文档数据库**和**键-值对数据库**，合称NoSQL数据库。\n\nORM：对象关系映射器，把高层的面向对象操作转换成低层的数据库指令。\n\nSQLAlchemy是一个强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用数据库原生SQL的低层功能。Flask-SQLAlchemy是一个Flask扩展，简化了在Flask应用中使用SQLAlchemy的操作。\n\n##### 配置数据库\n\n| 数据库引擎 | URL                                              |\n| :--------- | ------------------------------------------------ |\n| MySQL      | mysql://username:password@hostname/database      |\n| Postgres   | postgresql://username:password@hostname/database |\n| SQLite     | sqlite:////absolute/path/to/database             |\n\nhostname表示数据库服务所在的主机，可以是本地主机，也可以是远程服务器。数据库服务器上可以托管多个数据库，因此需要database表示要使用的数据库名。\n\n```\n# 以mysql为例\nfrom flask_sqlalchemy import SQLAlchemy\nimport pymysql\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:password@127.0.0.1/database'\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"SECRET_KEY\"] = \"dan yuan ren chang jiu\"\ndb = SQLAlchemy(app)\n```\n\n##### 定义模型\n\n```\n# 定义Role和User模型\nclass Role(db.Model):\n    __tablename__ = 'roles'\n    id = db.Column(db.Integer,primary_key=True)\n    name = db.Column(db.String(64),unique=True)\n    users = db.relationship('User',backref='role')\n    \n    def __repr__(self):\n        return '<Role %r>' % self.name\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, index=True)\n    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))# 外键，这列的值是相应的Role的id值\n    \n    def __repr__(self):\n        return '<User %r>' % self.username\n‘’‘\n类变量__tablename__定义在数据库中使用的表名。其余的类变量都是该模型的属性，定义为db.Column类的实例。\n两个模型定义了__repr()__方法，返回一个具有可读性的字符串表示模型，供调试和测试使用。\ndb.relationship()中的backref参数向User模型中添加一个role属性，从而定义反向关系。通过User实例的这个属性可以获取对应的Role模型对象，而不用再通过role_id外键获取。\n‘’‘\n\n```\n\n#####  数据库操作（增删改查）\n\n###### 创建表\n\n```\nfrom hello import db\ndb.drop_all()\ndb.create_all()\n```\n\n如果数据库表已经存在数据库，create_all()不会重新创建或更新相应的表。如果修改模型后要把改动应用到现有的数据库中，暴力方式是先删除旧表再重新创建。\n\n###### 插入行\n\n```\nfrom hello import Role, User\nadmin_role = Role(name = 'Admin')\nmod_role = Role(name = 'Modertor')\nuser_role = Role(name = 'User')\n\nuser_john = User(username='john', role=admin_role)\nuser_susan = User(username='susan', role=user_role)\nuser_david = User(username='david', role=user_role)\n\ndb.session.add_all([admin_role, mod_role, user_role, user_john, user_susan, user_david])\n#对数据库的改动通过数据库会话管理，会话由db.session表示。先添加到会话中，再调用commit()方法提交会话。\ndb.session.commit()\n```\n\n###### 删除行\n\n```\ndb.session.delete(mod_role)\ndb.session.commit()\n```\n\n###### 修改行\n\n```\nadmin_role.name = 'Administrator'\ndb.session.add(admin_role)\ndb.session.commit()\n```\n\n###### 查询行\n\nFlask-SQLAlchemy为每个模型类都提供了query对象。最基本的模型查询是使用all()方法取回对应表中的所有记录。\n\n```\nRole.query.all()\nUser.query.all()\n# 使用过滤器可以配置query对象进行更精确的数据库查询。\nUser.query.filter_by(role=user_role).all()\nuser_role = Role.query.filter_by(name='User').first() #first()方法只返回第一个结果\n```\n\n##### 在视图函数中操作数据库\n\n```\n@app.route('/', methods=['GET','POST'])\ndef index():\n    form = NameForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.name.data).first()\n        if user is None:\n            user = User(username=form.name.data)\n            db.session.add(user)\n            db.session.commit()\n            session['known'] = False\n        else:\n            session['known'] = True\n        session['name'] = form.name.data\n        form.name.data = ''\n        return redirect(url_for('index'))\n    return render_template('index.html', form=form, name=session.get('name'), known=session.get('known', False))\n```\n\n对应的模板可以进一步修改，对已知用户和新用户，显示不同的内容。\n\n```\n{% extends \"base.html\" %}\n{% import \"bootstrap/wtf.html\" as wtf %}\n\n{% block title %}Flasky{% endblock %}\n\n{% block page_content %}\n<div class=\"page-header\">\n    <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1>\n    {% if not known %}\n    <p>Pleased to meet you!</p>\n    {% else %}\n    <p>Happy to see you again!</p>\n    {% endif %}\n</div>\n{{ wtf.quick_form(form) }}\n{% endblock %}\n```\n\n","slug":"flask基础(二.)md","published":1,"updated":"2019-09-16T15:23:49.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t4t0019gisg5ad6teac","content":"<p><strong>中秋快乐</strong></p>\n<h3 id=\"flask扩展\"><a href=\"#flask扩展\" class=\"headerlink\" title=\"flask扩展\"></a>flask扩展</h3><p>这篇主要介绍三个扩展，在flask应用中，这三个扩展是非常具有实用性的。第一个是Web表单；第二个是数据库；第三个是电子邮件。</p>\n<h4 id=\"Web表单（FLASK-WTF）\"><a href=\"#Web表单（FLASK-WTF）\" class=\"headerlink\" title=\"Web表单（FLASK-WTF）\"></a>Web表单（FLASK-WTF）</h4><p>信息除了从服务器流向用户，还需要把用户提供的数据交给服务器来处理。Flask-WTF扩展对独立的WTForms包进行了包装，方便集成到Flask应用中。</p>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[&apos;SECRET_KEY&apos;] = &apos;dan yuan ren chang jiu&apos;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义表单类—-gt-在视图函数中处理表单—-gt-把表单渲染成HTML\"><a href=\"#定义表单类—-gt-在视图函数中处理表单—-gt-把表单渲染成HTML\" class=\"headerlink\" title=\"定义表单类—&gt;在视图函数中处理表单—&gt;把表单渲染成HTML\"></a>定义表单类—&gt;在视图函数中处理表单—&gt;把表单渲染成HTML</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义表单类</span><br><span class=\"line\">from flask_wtf import FlaskForm</span><br><span class=\"line\">from wtforms import StringField,SubmitField</span><br><span class=\"line\">from wtforms.validators import DataRequired</span><br><span class=\"line\"></span><br><span class=\"line\">class NameForm(FlaskForm):</span><br><span class=\"line\">    name = StringField(&apos;what is your name?&apos;,validators=[DataRequired()])</span><br><span class=\"line\">    submit = SubmitField(&apos;Submit&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">#在视图中处理表单</span><br><span class=\"line\">@app.route(&apos;/&apos;, method=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    name = None</span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    if form.validate_on_submit():</span><br><span class=\"line\">        name = form.name.data</span><br><span class=\"line\">        form.name.data = &apos;&apos;</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;,form=form,name=name)</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">首次访问应用时，服务器会收到一个没有表单数据的GET请求，所以if语句的内容会被跳过，会直接渲染模板，并将值为None的name变量作为参数。用户看到的浏览器显示了一个为空的表单。当用户提交表单后，服务器会收到一个包含数据的POST请求，if后面的不为空验证函数通过后，用户输入的名字可以通过字段的data属性获取，再把data属性设为空字符串，清空表单字段。再次渲染表单时，各字段没有内容。最后渲染模板，name参数的值为表单中输入的名字。</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\"></span><br><span class=\"line\">#把表单渲染成HTML</span><br><span class=\"line\">&lt;form method=&apos;POST&apos;&gt;</span><br><span class=\"line\">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class=\"line\">    &#123;&#123; form.name.label &#125;&#125; &#123;&#123; form.name(id=&apos;my-text-field&apos;) &#125;&#125;</span><br><span class=\"line\">    &#123;&#123; form.submit() &#125;&#125;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">#表单的form.hidden_tag()元素生成一个隐藏的字段，供Flask-WTF的CSRF防护机制使用。</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">Flask-Bootstrap扩展提供了高层级的辅助函数，可以使用Bootstrap预定义的表单样式渲染整个Flask-WTF表单，只需调用一次即可。</span><br><span class=\"line\">’‘’</span><br><span class=\"line\">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</span><br><span class=\"line\">&#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"重定向和用户会话\"><a href=\"#重定向和用户会话\" class=\"headerlink\" title=\"重定向和用户会话\"></a>重定向和用户会话</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,render_template,session,redirect,url_for</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    form = NameForm</span><br><span class=\"line\">    if form.validate_on_submit():</span><br><span class=\"line\">        session[&apos;name&apos;] = form.name.data</span><br><span class=\"line\">        return redirect(url_for(&apos;index&apos;))</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;,form=form,name=session.get(&apos;name&apos;))</span><br><span class=\"line\">#变量name保存在用户会话中，以便在请求间记住数据。用户会话时一种私有存储，每个连接到服务器的客户端都可以访问。</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">最后是使视图函数调用redirect()函数，这是Flask提供的辅助函数，用于生成HTTP重定向响应。它的参数是重定向的URL，这里使用的是应用的根URL，可以写成redirect(&apos;/&apos;)，不过上面使用了URL生成函数url_for()。url_for()函数的第一个且唯一必须指定的参数是端点名，即路由的内部名称。默认情况下，路由的端点是相应视图函数的名称。</span><br><span class=\"line\">最后使用get()获取字典中键对应的值，可以避免未找到键时抛出异常。如果指定的键不存在，则get()方法返回默认值None。</span><br><span class=\"line\">‘’‘</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"闪现消息\"><a href=\"#闪现消息\" class=\"headerlink\" title=\"闪现消息\"></a>闪现消息</h5><p>当用户提交有一项错误的登陆表单后，服务器发回的响应重新渲染登陆表单，并在表单上面显示消息，flash()函数可以实现这种效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,render_template,session,redirect,url_for,flash</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    if form.validate_on_submit():</span><br><span class=\"line\">        old_name = session.get(&apos;name&apos;)</span><br><span class=\"line\">        if old_name is not None and old_name != form.name.data:</span><br><span class=\"line\">            flash(&apos;Looks like you have changed your name!&apos;)</span><br><span class=\"line\">        session[&apos;name&apos;] = form.name.data</span><br><span class=\"line\">        return redirect(url_for(&apos;index&apos;))</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;,form = form,name = session.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n\n<p>调用flash()函数不能把消息显示出来，应用的模板还要渲染这些消息。最好在基模板中渲染消息，因为这样所有的页面都能显示需要显示的消息。Flask把get_flashed_message()函数开放给模板，用于获取并渲染闪现消息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &#123;% for message in get_flash_messages() %&#125;</span><br><span class=\"line\">    &lt;div class=&quot;alert alert-warning&quot;&gt;</span><br><span class=\"line\">        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;&amp;times;&lt;/buttom&gt;</span><br><span class=\"line\">        &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#123;% block page_content %&#125;&#123;% endblock%&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">这里使用了循环，在之前的请求循环中每次调用flash()函数时都会生成一个消息，所以可能有多个消息在排队等待显示。get_flashed_messages()函数获取的消息在下次调用时不会再次返回，闪现消息只显示一次就消失。</span><br><span class=\"line\">’‘’</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>数据库按照一定规则保存应用的数据，应用再发起查询，取回所需的数据。Web应用最常使用基于关系模型的数据库，称为SQL数据库，使用结构化查询语言。近年来开始流行<strong>文档数据库</strong>和<strong>键-值对数据库</strong>，合称NoSQL数据库。</p>\n<p>ORM：对象关系映射器，把高层的面向对象操作转换成低层的数据库指令。</p>\n<p>SQLAlchemy是一个强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用数据库原生SQL的低层功能。Flask-SQLAlchemy是一个Flask扩展，简化了在Flask应用中使用SQLAlchemy的操作。</p>\n<h5 id=\"配置数据库\"><a href=\"#配置数据库\" class=\"headerlink\" title=\"配置数据库\"></a>配置数据库</h5><table>\n<thead>\n<tr>\n<th align=\"left\">数据库引擎</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">MySQL</td>\n<td>mysql://username:password@hostname/database</td>\n</tr>\n<tr>\n<td align=\"left\">Postgres</td>\n<td>postgresql://username:password@hostname/database</td>\n</tr>\n<tr>\n<td align=\"left\">SQLite</td>\n<td>sqlite:////absolute/path/to/database</td>\n</tr>\n</tbody></table>\n<p>hostname表示数据库服务所在的主机，可以是本地主机，也可以是远程服务器。数据库服务器上可以托管多个数据库，因此需要database表示要使用的数据库名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以mysql为例</span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &apos;mysql+pymysql://root:password@127.0.0.1/database&apos;</span><br><span class=\"line\">app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False</span><br><span class=\"line\">app.config[&quot;SECRET_KEY&quot;] = &quot;dan yuan ren chang jiu&quot;</span><br><span class=\"line\">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义模型\"><a href=\"#定义模型\" class=\"headerlink\" title=\"定义模型\"></a>定义模型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义Role和User模型</span><br><span class=\"line\">class Role(db.Model):</span><br><span class=\"line\">    __tablename__ = &apos;roles&apos;</span><br><span class=\"line\">    id = db.Column(db.Integer,primary_key=True)</span><br><span class=\"line\">    name = db.Column(db.String(64),unique=True)</span><br><span class=\"line\">    users = db.relationship(&apos;User&apos;,backref=&apos;role&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return &apos;&lt;Role %r&gt;&apos; % self.name</span><br><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &apos;users&apos;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)</span><br><span class=\"line\">    username = db.Column(db.String(64), unique=True, index=True)</span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(&apos;roles.id&apos;))# 外键，这列的值是相应的Role的id值</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return &apos;&lt;User %r&gt;&apos; % self.username</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">类变量__tablename__定义在数据库中使用的表名。其余的类变量都是该模型的属性，定义为db.Column类的实例。</span><br><span class=\"line\">两个模型定义了__repr()__方法，返回一个具有可读性的字符串表示模型，供调试和测试使用。</span><br><span class=\"line\">db.relationship()中的backref参数向User模型中添加一个role属性，从而定义反向关系。通过User实例的这个属性可以获取对应的Role模型对象，而不用再通过role_id外键获取。</span><br><span class=\"line\">‘’‘</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数据库操作（增删改查）\"><a href=\"#数据库操作（增删改查）\" class=\"headerlink\" title=\"数据库操作（增删改查）\"></a>数据库操作（增删改查）</h5><h6 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from hello import db</span><br><span class=\"line\">db.drop_all()</span><br><span class=\"line\">db.create_all()</span><br></pre></td></tr></table></figure>\n\n<p>如果数据库表已经存在数据库，create_all()不会重新创建或更新相应的表。如果修改模型后要把改动应用到现有的数据库中，暴力方式是先删除旧表再重新创建。</p>\n<h6 id=\"插入行\"><a href=\"#插入行\" class=\"headerlink\" title=\"插入行\"></a>插入行</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from hello import Role, User</span><br><span class=\"line\">admin_role = Role(name = &apos;Admin&apos;)</span><br><span class=\"line\">mod_role = Role(name = &apos;Modertor&apos;)</span><br><span class=\"line\">user_role = Role(name = &apos;User&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">user_john = User(username=&apos;john&apos;, role=admin_role)</span><br><span class=\"line\">user_susan = User(username=&apos;susan&apos;, role=user_role)</span><br><span class=\"line\">user_david = User(username=&apos;david&apos;, role=user_role)</span><br><span class=\"line\"></span><br><span class=\"line\">db.session.add_all([admin_role, mod_role, user_role, user_john, user_susan, user_david])</span><br><span class=\"line\">#对数据库的改动通过数据库会话管理，会话由db.session表示。先添加到会话中，再调用commit()方法提交会话。</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除行\"><a href=\"#删除行\" class=\"headerlink\" title=\"删除行\"></a>删除行</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.session.delete(mod_role)</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"修改行\"><a href=\"#修改行\" class=\"headerlink\" title=\"修改行\"></a>修改行</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin_role.name = &apos;Administrator&apos;</span><br><span class=\"line\">db.session.add(admin_role)</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"查询行\"><a href=\"#查询行\" class=\"headerlink\" title=\"查询行\"></a>查询行</h6><p>Flask-SQLAlchemy为每个模型类都提供了query对象。最基本的模型查询是使用all()方法取回对应表中的所有记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Role.query.all()</span><br><span class=\"line\">User.query.all()</span><br><span class=\"line\"># 使用过滤器可以配置query对象进行更精确的数据库查询。</span><br><span class=\"line\">User.query.filter_by(role=user_role).all()</span><br><span class=\"line\">user_role = Role.query.filter_by(name=&apos;User&apos;).first() #first()方法只返回第一个结果</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在视图函数中操作数据库\"><a href=\"#在视图函数中操作数据库\" class=\"headerlink\" title=\"在视图函数中操作数据库\"></a>在视图函数中操作数据库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    if form.validate_on_submit():</span><br><span class=\"line\">        user = User.query.filter_by(username=form.name.data).first()</span><br><span class=\"line\">        if user is None:</span><br><span class=\"line\">            user = User(username=form.name.data)</span><br><span class=\"line\">            db.session.add(user)</span><br><span class=\"line\">            db.session.commit()</span><br><span class=\"line\">            session[&apos;known&apos;] = False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            session[&apos;known&apos;] = True</span><br><span class=\"line\">        session[&apos;name&apos;] = form.name.data</span><br><span class=\"line\">        form.name.data = &apos;&apos;</span><br><span class=\"line\">        return redirect(url_for(&apos;index&apos;))</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;, form=form, name=session.get(&apos;name&apos;), known=session.get(&apos;known&apos;, False))</span><br></pre></td></tr></table></figure>\n\n<p>对应的模板可以进一步修改，对已知用户和新用户，显示不同的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class=\"line\">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_content %&#125;</span><br><span class=\"line\">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello, &#123;% if name %&#125;&#123;&#123; name &#125;&#125;&#123;% else %&#125;Stranger&#123;% endif %&#125;!&lt;/h1&gt;</span><br><span class=\"line\">    &#123;% if not known %&#125;</span><br><span class=\"line\">    &lt;p&gt;Pleased to meet you!&lt;/p&gt;</span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">    &lt;p&gt;Happy to see you again!&lt;/p&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>中秋快乐</strong></p>\n<h3 id=\"flask扩展\"><a href=\"#flask扩展\" class=\"headerlink\" title=\"flask扩展\"></a>flask扩展</h3><p>这篇主要介绍三个扩展，在flask应用中，这三个扩展是非常具有实用性的。第一个是Web表单；第二个是数据库；第三个是电子邮件。</p>\n<h4 id=\"Web表单（FLASK-WTF）\"><a href=\"#Web表单（FLASK-WTF）\" class=\"headerlink\" title=\"Web表单（FLASK-WTF）\"></a>Web表单（FLASK-WTF）</h4><p>信息除了从服务器流向用户，还需要把用户提供的数据交给服务器来处理。Flask-WTF扩展对独立的WTForms包进行了包装，方便集成到Flask应用中。</p>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[&apos;SECRET_KEY&apos;] = &apos;dan yuan ren chang jiu&apos;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义表单类—-gt-在视图函数中处理表单—-gt-把表单渲染成HTML\"><a href=\"#定义表单类—-gt-在视图函数中处理表单—-gt-把表单渲染成HTML\" class=\"headerlink\" title=\"定义表单类—&gt;在视图函数中处理表单—&gt;把表单渲染成HTML\"></a>定义表单类—&gt;在视图函数中处理表单—&gt;把表单渲染成HTML</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义表单类</span><br><span class=\"line\">from flask_wtf import FlaskForm</span><br><span class=\"line\">from wtforms import StringField,SubmitField</span><br><span class=\"line\">from wtforms.validators import DataRequired</span><br><span class=\"line\"></span><br><span class=\"line\">class NameForm(FlaskForm):</span><br><span class=\"line\">    name = StringField(&apos;what is your name?&apos;,validators=[DataRequired()])</span><br><span class=\"line\">    submit = SubmitField(&apos;Submit&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">#在视图中处理表单</span><br><span class=\"line\">@app.route(&apos;/&apos;, method=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    name = None</span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    if form.validate_on_submit():</span><br><span class=\"line\">        name = form.name.data</span><br><span class=\"line\">        form.name.data = &apos;&apos;</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;,form=form,name=name)</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">首次访问应用时，服务器会收到一个没有表单数据的GET请求，所以if语句的内容会被跳过，会直接渲染模板，并将值为None的name变量作为参数。用户看到的浏览器显示了一个为空的表单。当用户提交表单后，服务器会收到一个包含数据的POST请求，if后面的不为空验证函数通过后，用户输入的名字可以通过字段的data属性获取，再把data属性设为空字符串，清空表单字段。再次渲染表单时，各字段没有内容。最后渲染模板，name参数的值为表单中输入的名字。</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\"></span><br><span class=\"line\">#把表单渲染成HTML</span><br><span class=\"line\">&lt;form method=&apos;POST&apos;&gt;</span><br><span class=\"line\">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class=\"line\">    &#123;&#123; form.name.label &#125;&#125; &#123;&#123; form.name(id=&apos;my-text-field&apos;) &#125;&#125;</span><br><span class=\"line\">    &#123;&#123; form.submit() &#125;&#125;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">#表单的form.hidden_tag()元素生成一个隐藏的字段，供Flask-WTF的CSRF防护机制使用。</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">Flask-Bootstrap扩展提供了高层级的辅助函数，可以使用Bootstrap预定义的表单样式渲染整个Flask-WTF表单，只需调用一次即可。</span><br><span class=\"line\">’‘’</span><br><span class=\"line\">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</span><br><span class=\"line\">&#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"重定向和用户会话\"><a href=\"#重定向和用户会话\" class=\"headerlink\" title=\"重定向和用户会话\"></a>重定向和用户会话</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,render_template,session,redirect,url_for</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    form = NameForm</span><br><span class=\"line\">    if form.validate_on_submit():</span><br><span class=\"line\">        session[&apos;name&apos;] = form.name.data</span><br><span class=\"line\">        return redirect(url_for(&apos;index&apos;))</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;,form=form,name=session.get(&apos;name&apos;))</span><br><span class=\"line\">#变量name保存在用户会话中，以便在请求间记住数据。用户会话时一种私有存储，每个连接到服务器的客户端都可以访问。</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">最后是使视图函数调用redirect()函数，这是Flask提供的辅助函数，用于生成HTTP重定向响应。它的参数是重定向的URL，这里使用的是应用的根URL，可以写成redirect(&apos;/&apos;)，不过上面使用了URL生成函数url_for()。url_for()函数的第一个且唯一必须指定的参数是端点名，即路由的内部名称。默认情况下，路由的端点是相应视图函数的名称。</span><br><span class=\"line\">最后使用get()获取字典中键对应的值，可以避免未找到键时抛出异常。如果指定的键不存在，则get()方法返回默认值None。</span><br><span class=\"line\">‘’‘</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"闪现消息\"><a href=\"#闪现消息\" class=\"headerlink\" title=\"闪现消息\"></a>闪现消息</h5><p>当用户提交有一项错误的登陆表单后，服务器发回的响应重新渲染登陆表单，并在表单上面显示消息，flash()函数可以实现这种效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,render_template,session,redirect,url_for,flash</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    if form.validate_on_submit():</span><br><span class=\"line\">        old_name = session.get(&apos;name&apos;)</span><br><span class=\"line\">        if old_name is not None and old_name != form.name.data:</span><br><span class=\"line\">            flash(&apos;Looks like you have changed your name!&apos;)</span><br><span class=\"line\">        session[&apos;name&apos;] = form.name.data</span><br><span class=\"line\">        return redirect(url_for(&apos;index&apos;))</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;,form = form,name = session.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n\n<p>调用flash()函数不能把消息显示出来，应用的模板还要渲染这些消息。最好在基模板中渲染消息，因为这样所有的页面都能显示需要显示的消息。Flask把get_flashed_message()函数开放给模板，用于获取并渲染闪现消息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &#123;% for message in get_flash_messages() %&#125;</span><br><span class=\"line\">    &lt;div class=&quot;alert alert-warning&quot;&gt;</span><br><span class=\"line\">        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;&amp;times;&lt;/buttom&gt;</span><br><span class=\"line\">        &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#123;% block page_content %&#125;&#123;% endblock%&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">这里使用了循环，在之前的请求循环中每次调用flash()函数时都会生成一个消息，所以可能有多个消息在排队等待显示。get_flashed_messages()函数获取的消息在下次调用时不会再次返回，闪现消息只显示一次就消失。</span><br><span class=\"line\">’‘’</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>数据库按照一定规则保存应用的数据，应用再发起查询，取回所需的数据。Web应用最常使用基于关系模型的数据库，称为SQL数据库，使用结构化查询语言。近年来开始流行<strong>文档数据库</strong>和<strong>键-值对数据库</strong>，合称NoSQL数据库。</p>\n<p>ORM：对象关系映射器，把高层的面向对象操作转换成低层的数据库指令。</p>\n<p>SQLAlchemy是一个强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用数据库原生SQL的低层功能。Flask-SQLAlchemy是一个Flask扩展，简化了在Flask应用中使用SQLAlchemy的操作。</p>\n<h5 id=\"配置数据库\"><a href=\"#配置数据库\" class=\"headerlink\" title=\"配置数据库\"></a>配置数据库</h5><table>\n<thead>\n<tr>\n<th align=\"left\">数据库引擎</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">MySQL</td>\n<td>mysql://username:password@hostname/database</td>\n</tr>\n<tr>\n<td align=\"left\">Postgres</td>\n<td>postgresql://username:password@hostname/database</td>\n</tr>\n<tr>\n<td align=\"left\">SQLite</td>\n<td>sqlite:////absolute/path/to/database</td>\n</tr>\n</tbody></table>\n<p>hostname表示数据库服务所在的主机，可以是本地主机，也可以是远程服务器。数据库服务器上可以托管多个数据库，因此需要database表示要使用的数据库名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以mysql为例</span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &apos;mysql+pymysql://root:password@127.0.0.1/database&apos;</span><br><span class=\"line\">app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False</span><br><span class=\"line\">app.config[&quot;SECRET_KEY&quot;] = &quot;dan yuan ren chang jiu&quot;</span><br><span class=\"line\">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义模型\"><a href=\"#定义模型\" class=\"headerlink\" title=\"定义模型\"></a>定义模型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义Role和User模型</span><br><span class=\"line\">class Role(db.Model):</span><br><span class=\"line\">    __tablename__ = &apos;roles&apos;</span><br><span class=\"line\">    id = db.Column(db.Integer,primary_key=True)</span><br><span class=\"line\">    name = db.Column(db.String(64),unique=True)</span><br><span class=\"line\">    users = db.relationship(&apos;User&apos;,backref=&apos;role&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return &apos;&lt;Role %r&gt;&apos; % self.name</span><br><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &apos;users&apos;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True)</span><br><span class=\"line\">    username = db.Column(db.String(64), unique=True, index=True)</span><br><span class=\"line\">    role_id = db.Column(db.Integer, db.ForeignKey(&apos;roles.id&apos;))# 外键，这列的值是相应的Role的id值</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return &apos;&lt;User %r&gt;&apos; % self.username</span><br><span class=\"line\">‘’‘</span><br><span class=\"line\">类变量__tablename__定义在数据库中使用的表名。其余的类变量都是该模型的属性，定义为db.Column类的实例。</span><br><span class=\"line\">两个模型定义了__repr()__方法，返回一个具有可读性的字符串表示模型，供调试和测试使用。</span><br><span class=\"line\">db.relationship()中的backref参数向User模型中添加一个role属性，从而定义反向关系。通过User实例的这个属性可以获取对应的Role模型对象，而不用再通过role_id外键获取。</span><br><span class=\"line\">‘’‘</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数据库操作（增删改查）\"><a href=\"#数据库操作（增删改查）\" class=\"headerlink\" title=\"数据库操作（增删改查）\"></a>数据库操作（增删改查）</h5><h6 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from hello import db</span><br><span class=\"line\">db.drop_all()</span><br><span class=\"line\">db.create_all()</span><br></pre></td></tr></table></figure>\n\n<p>如果数据库表已经存在数据库，create_all()不会重新创建或更新相应的表。如果修改模型后要把改动应用到现有的数据库中，暴力方式是先删除旧表再重新创建。</p>\n<h6 id=\"插入行\"><a href=\"#插入行\" class=\"headerlink\" title=\"插入行\"></a>插入行</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from hello import Role, User</span><br><span class=\"line\">admin_role = Role(name = &apos;Admin&apos;)</span><br><span class=\"line\">mod_role = Role(name = &apos;Modertor&apos;)</span><br><span class=\"line\">user_role = Role(name = &apos;User&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">user_john = User(username=&apos;john&apos;, role=admin_role)</span><br><span class=\"line\">user_susan = User(username=&apos;susan&apos;, role=user_role)</span><br><span class=\"line\">user_david = User(username=&apos;david&apos;, role=user_role)</span><br><span class=\"line\"></span><br><span class=\"line\">db.session.add_all([admin_role, mod_role, user_role, user_john, user_susan, user_david])</span><br><span class=\"line\">#对数据库的改动通过数据库会话管理，会话由db.session表示。先添加到会话中，再调用commit()方法提交会话。</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除行\"><a href=\"#删除行\" class=\"headerlink\" title=\"删除行\"></a>删除行</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.session.delete(mod_role)</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"修改行\"><a href=\"#修改行\" class=\"headerlink\" title=\"修改行\"></a>修改行</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin_role.name = &apos;Administrator&apos;</span><br><span class=\"line\">db.session.add(admin_role)</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"查询行\"><a href=\"#查询行\" class=\"headerlink\" title=\"查询行\"></a>查询行</h6><p>Flask-SQLAlchemy为每个模型类都提供了query对象。最基本的模型查询是使用all()方法取回对应表中的所有记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Role.query.all()</span><br><span class=\"line\">User.query.all()</span><br><span class=\"line\"># 使用过滤器可以配置query对象进行更精确的数据库查询。</span><br><span class=\"line\">User.query.filter_by(role=user_role).all()</span><br><span class=\"line\">user_role = Role.query.filter_by(name=&apos;User&apos;).first() #first()方法只返回第一个结果</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在视图函数中操作数据库\"><a href=\"#在视图函数中操作数据库\" class=\"headerlink\" title=\"在视图函数中操作数据库\"></a>在视图函数中操作数据库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    form = NameForm()</span><br><span class=\"line\">    if form.validate_on_submit():</span><br><span class=\"line\">        user = User.query.filter_by(username=form.name.data).first()</span><br><span class=\"line\">        if user is None:</span><br><span class=\"line\">            user = User(username=form.name.data)</span><br><span class=\"line\">            db.session.add(user)</span><br><span class=\"line\">            db.session.commit()</span><br><span class=\"line\">            session[&apos;known&apos;] = False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            session[&apos;known&apos;] = True</span><br><span class=\"line\">        session[&apos;name&apos;] = form.name.data</span><br><span class=\"line\">        form.name.data = &apos;&apos;</span><br><span class=\"line\">        return redirect(url_for(&apos;index&apos;))</span><br><span class=\"line\">    return render_template(&apos;index.html&apos;, form=form, name=session.get(&apos;name&apos;), known=session.get(&apos;known&apos;, False))</span><br></pre></td></tr></table></figure>\n\n<p>对应的模板可以进一步修改，对已知用户和新用户，显示不同的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class=\"line\">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_content %&#125;</span><br><span class=\"line\">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello, &#123;% if name %&#125;&#123;&#123; name &#125;&#125;&#123;% else %&#125;Stranger&#123;% endif %&#125;!&lt;/h1&gt;</span><br><span class=\"line\">    &#123;% if not known %&#125;</span><br><span class=\"line\">    &lt;p&gt;Pleased to meet you!&lt;/p&gt;</span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">    &lt;p&gt;Happy to see you again!&lt;/p&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&#123;&#123; wtf.quick_form(form) &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"记横空出世与purple","date":"2019-10-07T06:49:30.000Z","_content":"\n十一七天假期快结束了。回顾一下这七天，不免有些羞愧。既没有出去玩耍，宅着也没有很好的持续学习。如果时间真的随人的感受有长有短的话，那么这七天在我的感受里就是短暂的。在这假期里，我凑巧看了两部电影的解析，分别是《横空出世》和《purple》。依然抱歉的是我没有去看原片，而是选择了时长较短的电影解说，我不知道这是不是出于浮躁的心态还是别的什么原因。之所以想写一下这两部电影，是因为单单看完了电影解说，就让我有很多的感想。仔细想想，好电影是不是就是引起观众内心的共鸣，打动人心了，才让人对它赞不绝口，印象深刻。\n\n先说《横空出世》吧。正值国庆，因此这部电影被推出来也不奇怪，但是我还是觉得这部电影应该被大众所熟知的。它记录了一段历史，一段如此励志、真正体现中国人民珍贵品质的历史。从出生以来，我知道我不能代表所有人，但是我生活的这个时代，从大多数人来看，从看过的历史来看，确实是和平幸福的。而现在的这一切，难道都是平白无故上天恩赐的吗？这也是横空出世这部电影打动我的地方。通过这部电影，我才有幸知道了那段历史，我现在所处的相对和平的时代，是那一代的中国人，是打完抗日去抗美援朝，战争结束后又被派到戈壁负责寻找和建造核武器基地的老兵，是在那个没有计算机的年代靠打算盘计算公式，用能覆盖整个戈壁的演算纸，在不能出错并且只有两年时间限制里的科学家，共同努力制造出了起到震慑、令其他国家不敢随意染指我们国家的核武器——原子弹。这其中的艰辛，就是电影也道不尽演不完。身处和平年代的我们，怎么能不感激，怎么能不致敬！\n\n再谈一下《purple》。一开始看到这个电影解说，我也是出于无聊随便点进去的，刚开始的种种画面，全部是黑人，女主人公的悲惨遭遇引发了我的好奇心。女主先是被她的父亲强奸生下了两个孩子，全部被抱走。她的母亲知道这些事情却没有能力保护她。她最疼爱的妹妹被一个男人看上，她的父亲认为妹妹还小让她代替她妹妹嫁给了那个男人。和那个男人在一起后，女主像个佣人服侍着家中的一切，妹妹很快被她父亲缠上。为了躲避父亲的骚扰，妹妹去了女主家里，姐妹得以重逢，她们快乐的生活了一段日子。可是因为男人对妹妹的骚扰，在一次强奸未遂后，妹妹离开了女主，走之前妹妹约定每个月会给女主写一封信。女主一直在等妹妹的信，而信却迟迟没有来。再说那个男人，他心中一直有一个很喜欢的人，因此总会出现这样的场景，女主总是帮男人烫好礼服，然后男人穿上礼服去找他喜欢的女人约会。看到这里我心里是为这个女主感到悲哀和无奈的，我以为这是一部核心为表达黑人女性家庭地位低下的悲剧电影。然而，随着一个女性的出现，剧情开始了转变。电影前面大量的渲染了黑人女主的悲惨，默默忍受她的周遭施加给她的一切侮辱，逆来顺受。而此时出现了一个女性，在女主看来简直是不可思议，她强壮的体魄，如同她的性格，像一团火，不受男人的束缚，做自己觉得对的事情。她可以在不满男人的行为时随手甩男人一巴掌，她是如此可爱的存在，和女主的对比，让人忍不住为这个女生鼓掌。这个女人和女主男人的儿子走在了一起，开了一个酒吧。而那个男人看不惯这个女人的性格，想要逼迫儿子与她分开。甚至连女主，也在告诉继子男人在女人不听话的时候就打女人。那个彪悍的女人很愤怒，因为连一个不敢反抗的女性都在帮助男人欺负她。最终儿子迫于父亲的威严，选择与她分开，又找了另一个女人一起生活。同时，那个男人一直喜欢的女人，为了养病还是什么原因，住进了女主的家里。随着这个女人的到来，不同于我们认为的必然会发生的女人间的战争，女主对这个美丽女人更多的是好奇。她观察着向来对她颐气指使的丈夫，笨手笨脚的给美人做餐点，被美人嫌弃打翻扔出房门，她自己也偷偷做了一个餐点递了进去。餐盘出来的时候是空的。就这样，女主开始给美人梳头、按摩。慢慢的，她逐渐意识到美人举手投足散发出来的，她从未见到过的那种称之为“魅力”的东西，她自己也被深深的吸引着。她跟着美人去了她继子的酒吧，看到美人唱歌，一窝蜂的男人围着她转。这时那个彪悍的女人也在酒吧，看到她继子和他现在的女人在一起，上去打了那个女人一巴掌。这下整个酒吧开始乱糟糟的，而女主在此时却像稚童般，天真的观望着周遭的一切。没过多久，一个白人高官的妻子在一次市集中看中了那个彪悍的女人，想要她当自己的仆人。那个女人有着自己的孩子，自然是不愿意的，她的反抗得罪了高官，直接将她关进了监狱。在监狱的日子是怎样的我们不知道，过了几年这个女人从监狱里出来了，同时她还瞎了一只眼睛。更为无奈的是，她最终还是成为了那个高官妻子的仆人，仿佛失去了灵魂般不再有她从前的性子，整个人变得麻木妥协。之后高官妻子曾经带着她回去看她的孩子和亲人，女主人失手没能控制好汽车的倒车，并且误以为想要帮助她的黑人对她有所图谋，为了保护女主人，她无奈的还是跟着女主人走了。而这时，那个美人也决定走了。女主很渴望能和美人一起走，她兴冲冲的回家，颤抖着开始收拾起自己的行李，看着美人走上了公交车，她多么希望自己也能跟着一起。这时在一旁送别美人的她的丈夫，仿佛看穿了女主的意图。他盯着女主，仿佛笃定女主是绝对不敢上车的。而女主，确实，纵使万般想要上车，还是没能克服内心的恐惧，最终只能目送车子走远。就这么又过了几年，那个女仆终于回到了家里，美人有了丈夫又重新回到小镇里。一次意外，女主和美人发现，原来女主的妹妹一直有给她写信，只是信故意被她男人收起来了，此时，女主第一次有了愤怒，如果不是美人的及时出现，她甚至想在给丈夫刮胡子的时候用刀片用力的割他的脖子。而男人，在事后想起女主眼中的杀气，仍感到心有余悸。在接下来的一次大聚餐中，女主当着所有人的面，告诉她的丈夫，她要离开他。或许是受到女主的勇气的鼓舞，那个曾经彪悍的女人，眼里刹那间也迸发出了光彩，讲述她刚被关进监狱时，不听话就挨揍，在她反复被揍之后，她才无奈的放弃了反抗。可是女主的这番举动，让她好似也找回了自己的勇气。最不敢相信这一切的无疑是女主的丈夫了，他万万想不到女主竟然会有勇气选择离开。失去女主的那个家，不再整洁，男人浑浑噩噩，也不再对他的父亲言听计从。电影的结尾，女主与她妹妹重逢了，她的两个孩子也平安长大，一家人终于团聚。怎么说呢，这部电影我触动最大的，是女主的一个成长和转变。她从小成长的环境决定了她青年时代只能任人安排，不断向男人妥协。而在她长大的过程中，她见识到了那个彪悍的女人，她开始发现原来女人还可以那样阳光，自尊自强。随后，她又结识了美人，发现女人还可以这样优雅、魅力四射。最后是在妹妹的亲情的鼓励下，她冲破了那个跟随她几十年的思想的桎梏，终于为自己，学会争取，学会拒绝，学会独立坚强。在这部电影中，我看到自信的强大，自信的感染力，自尊自立对人的重要。","source":"_posts/记横空出世与purple.md","raw":"---\ntitle: 记横空出世与purple\ndate: 2019-10-07 14:49:30\ncategories: 随笔\ntags: 电影\n---\n\n十一七天假期快结束了。回顾一下这七天，不免有些羞愧。既没有出去玩耍，宅着也没有很好的持续学习。如果时间真的随人的感受有长有短的话，那么这七天在我的感受里就是短暂的。在这假期里，我凑巧看了两部电影的解析，分别是《横空出世》和《purple》。依然抱歉的是我没有去看原片，而是选择了时长较短的电影解说，我不知道这是不是出于浮躁的心态还是别的什么原因。之所以想写一下这两部电影，是因为单单看完了电影解说，就让我有很多的感想。仔细想想，好电影是不是就是引起观众内心的共鸣，打动人心了，才让人对它赞不绝口，印象深刻。\n\n先说《横空出世》吧。正值国庆，因此这部电影被推出来也不奇怪，但是我还是觉得这部电影应该被大众所熟知的。它记录了一段历史，一段如此励志、真正体现中国人民珍贵品质的历史。从出生以来，我知道我不能代表所有人，但是我生活的这个时代，从大多数人来看，从看过的历史来看，确实是和平幸福的。而现在的这一切，难道都是平白无故上天恩赐的吗？这也是横空出世这部电影打动我的地方。通过这部电影，我才有幸知道了那段历史，我现在所处的相对和平的时代，是那一代的中国人，是打完抗日去抗美援朝，战争结束后又被派到戈壁负责寻找和建造核武器基地的老兵，是在那个没有计算机的年代靠打算盘计算公式，用能覆盖整个戈壁的演算纸，在不能出错并且只有两年时间限制里的科学家，共同努力制造出了起到震慑、令其他国家不敢随意染指我们国家的核武器——原子弹。这其中的艰辛，就是电影也道不尽演不完。身处和平年代的我们，怎么能不感激，怎么能不致敬！\n\n再谈一下《purple》。一开始看到这个电影解说，我也是出于无聊随便点进去的，刚开始的种种画面，全部是黑人，女主人公的悲惨遭遇引发了我的好奇心。女主先是被她的父亲强奸生下了两个孩子，全部被抱走。她的母亲知道这些事情却没有能力保护她。她最疼爱的妹妹被一个男人看上，她的父亲认为妹妹还小让她代替她妹妹嫁给了那个男人。和那个男人在一起后，女主像个佣人服侍着家中的一切，妹妹很快被她父亲缠上。为了躲避父亲的骚扰，妹妹去了女主家里，姐妹得以重逢，她们快乐的生活了一段日子。可是因为男人对妹妹的骚扰，在一次强奸未遂后，妹妹离开了女主，走之前妹妹约定每个月会给女主写一封信。女主一直在等妹妹的信，而信却迟迟没有来。再说那个男人，他心中一直有一个很喜欢的人，因此总会出现这样的场景，女主总是帮男人烫好礼服，然后男人穿上礼服去找他喜欢的女人约会。看到这里我心里是为这个女主感到悲哀和无奈的，我以为这是一部核心为表达黑人女性家庭地位低下的悲剧电影。然而，随着一个女性的出现，剧情开始了转变。电影前面大量的渲染了黑人女主的悲惨，默默忍受她的周遭施加给她的一切侮辱，逆来顺受。而此时出现了一个女性，在女主看来简直是不可思议，她强壮的体魄，如同她的性格，像一团火，不受男人的束缚，做自己觉得对的事情。她可以在不满男人的行为时随手甩男人一巴掌，她是如此可爱的存在，和女主的对比，让人忍不住为这个女生鼓掌。这个女人和女主男人的儿子走在了一起，开了一个酒吧。而那个男人看不惯这个女人的性格，想要逼迫儿子与她分开。甚至连女主，也在告诉继子男人在女人不听话的时候就打女人。那个彪悍的女人很愤怒，因为连一个不敢反抗的女性都在帮助男人欺负她。最终儿子迫于父亲的威严，选择与她分开，又找了另一个女人一起生活。同时，那个男人一直喜欢的女人，为了养病还是什么原因，住进了女主的家里。随着这个女人的到来，不同于我们认为的必然会发生的女人间的战争，女主对这个美丽女人更多的是好奇。她观察着向来对她颐气指使的丈夫，笨手笨脚的给美人做餐点，被美人嫌弃打翻扔出房门，她自己也偷偷做了一个餐点递了进去。餐盘出来的时候是空的。就这样，女主开始给美人梳头、按摩。慢慢的，她逐渐意识到美人举手投足散发出来的，她从未见到过的那种称之为“魅力”的东西，她自己也被深深的吸引着。她跟着美人去了她继子的酒吧，看到美人唱歌，一窝蜂的男人围着她转。这时那个彪悍的女人也在酒吧，看到她继子和他现在的女人在一起，上去打了那个女人一巴掌。这下整个酒吧开始乱糟糟的，而女主在此时却像稚童般，天真的观望着周遭的一切。没过多久，一个白人高官的妻子在一次市集中看中了那个彪悍的女人，想要她当自己的仆人。那个女人有着自己的孩子，自然是不愿意的，她的反抗得罪了高官，直接将她关进了监狱。在监狱的日子是怎样的我们不知道，过了几年这个女人从监狱里出来了，同时她还瞎了一只眼睛。更为无奈的是，她最终还是成为了那个高官妻子的仆人，仿佛失去了灵魂般不再有她从前的性子，整个人变得麻木妥协。之后高官妻子曾经带着她回去看她的孩子和亲人，女主人失手没能控制好汽车的倒车，并且误以为想要帮助她的黑人对她有所图谋，为了保护女主人，她无奈的还是跟着女主人走了。而这时，那个美人也决定走了。女主很渴望能和美人一起走，她兴冲冲的回家，颤抖着开始收拾起自己的行李，看着美人走上了公交车，她多么希望自己也能跟着一起。这时在一旁送别美人的她的丈夫，仿佛看穿了女主的意图。他盯着女主，仿佛笃定女主是绝对不敢上车的。而女主，确实，纵使万般想要上车，还是没能克服内心的恐惧，最终只能目送车子走远。就这么又过了几年，那个女仆终于回到了家里，美人有了丈夫又重新回到小镇里。一次意外，女主和美人发现，原来女主的妹妹一直有给她写信，只是信故意被她男人收起来了，此时，女主第一次有了愤怒，如果不是美人的及时出现，她甚至想在给丈夫刮胡子的时候用刀片用力的割他的脖子。而男人，在事后想起女主眼中的杀气，仍感到心有余悸。在接下来的一次大聚餐中，女主当着所有人的面，告诉她的丈夫，她要离开他。或许是受到女主的勇气的鼓舞，那个曾经彪悍的女人，眼里刹那间也迸发出了光彩，讲述她刚被关进监狱时，不听话就挨揍，在她反复被揍之后，她才无奈的放弃了反抗。可是女主的这番举动，让她好似也找回了自己的勇气。最不敢相信这一切的无疑是女主的丈夫了，他万万想不到女主竟然会有勇气选择离开。失去女主的那个家，不再整洁，男人浑浑噩噩，也不再对他的父亲言听计从。电影的结尾，女主与她妹妹重逢了，她的两个孩子也平安长大，一家人终于团聚。怎么说呢，这部电影我触动最大的，是女主的一个成长和转变。她从小成长的环境决定了她青年时代只能任人安排，不断向男人妥协。而在她长大的过程中，她见识到了那个彪悍的女人，她开始发现原来女人还可以那样阳光，自尊自强。随后，她又结识了美人，发现女人还可以这样优雅、魅力四射。最后是在妹妹的亲情的鼓励下，她冲破了那个跟随她几十年的思想的桎梏，终于为自己，学会争取，学会拒绝，学会独立坚强。在这部电影中，我看到自信的强大，自信的感染力，自尊自立对人的重要。","slug":"记横空出世与purple","published":1,"updated":"2019-10-08T13:00:50.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ez4t4u001bgisg1e9vplka","content":"<p>十一七天假期快结束了。回顾一下这七天，不免有些羞愧。既没有出去玩耍，宅着也没有很好的持续学习。如果时间真的随人的感受有长有短的话，那么这七天在我的感受里就是短暂的。在这假期里，我凑巧看了两部电影的解析，分别是《横空出世》和《purple》。依然抱歉的是我没有去看原片，而是选择了时长较短的电影解说，我不知道这是不是出于浮躁的心态还是别的什么原因。之所以想写一下这两部电影，是因为单单看完了电影解说，就让我有很多的感想。仔细想想，好电影是不是就是引起观众内心的共鸣，打动人心了，才让人对它赞不绝口，印象深刻。</p>\n<p>先说《横空出世》吧。正值国庆，因此这部电影被推出来也不奇怪，但是我还是觉得这部电影应该被大众所熟知的。它记录了一段历史，一段如此励志、真正体现中国人民珍贵品质的历史。从出生以来，我知道我不能代表所有人，但是我生活的这个时代，从大多数人来看，从看过的历史来看，确实是和平幸福的。而现在的这一切，难道都是平白无故上天恩赐的吗？这也是横空出世这部电影打动我的地方。通过这部电影，我才有幸知道了那段历史，我现在所处的相对和平的时代，是那一代的中国人，是打完抗日去抗美援朝，战争结束后又被派到戈壁负责寻找和建造核武器基地的老兵，是在那个没有计算机的年代靠打算盘计算公式，用能覆盖整个戈壁的演算纸，在不能出错并且只有两年时间限制里的科学家，共同努力制造出了起到震慑、令其他国家不敢随意染指我们国家的核武器——原子弹。这其中的艰辛，就是电影也道不尽演不完。身处和平年代的我们，怎么能不感激，怎么能不致敬！</p>\n<p>再谈一下《purple》。一开始看到这个电影解说，我也是出于无聊随便点进去的，刚开始的种种画面，全部是黑人，女主人公的悲惨遭遇引发了我的好奇心。女主先是被她的父亲强奸生下了两个孩子，全部被抱走。她的母亲知道这些事情却没有能力保护她。她最疼爱的妹妹被一个男人看上，她的父亲认为妹妹还小让她代替她妹妹嫁给了那个男人。和那个男人在一起后，女主像个佣人服侍着家中的一切，妹妹很快被她父亲缠上。为了躲避父亲的骚扰，妹妹去了女主家里，姐妹得以重逢，她们快乐的生活了一段日子。可是因为男人对妹妹的骚扰，在一次强奸未遂后，妹妹离开了女主，走之前妹妹约定每个月会给女主写一封信。女主一直在等妹妹的信，而信却迟迟没有来。再说那个男人，他心中一直有一个很喜欢的人，因此总会出现这样的场景，女主总是帮男人烫好礼服，然后男人穿上礼服去找他喜欢的女人约会。看到这里我心里是为这个女主感到悲哀和无奈的，我以为这是一部核心为表达黑人女性家庭地位低下的悲剧电影。然而，随着一个女性的出现，剧情开始了转变。电影前面大量的渲染了黑人女主的悲惨，默默忍受她的周遭施加给她的一切侮辱，逆来顺受。而此时出现了一个女性，在女主看来简直是不可思议，她强壮的体魄，如同她的性格，像一团火，不受男人的束缚，做自己觉得对的事情。她可以在不满男人的行为时随手甩男人一巴掌，她是如此可爱的存在，和女主的对比，让人忍不住为这个女生鼓掌。这个女人和女主男人的儿子走在了一起，开了一个酒吧。而那个男人看不惯这个女人的性格，想要逼迫儿子与她分开。甚至连女主，也在告诉继子男人在女人不听话的时候就打女人。那个彪悍的女人很愤怒，因为连一个不敢反抗的女性都在帮助男人欺负她。最终儿子迫于父亲的威严，选择与她分开，又找了另一个女人一起生活。同时，那个男人一直喜欢的女人，为了养病还是什么原因，住进了女主的家里。随着这个女人的到来，不同于我们认为的必然会发生的女人间的战争，女主对这个美丽女人更多的是好奇。她观察着向来对她颐气指使的丈夫，笨手笨脚的给美人做餐点，被美人嫌弃打翻扔出房门，她自己也偷偷做了一个餐点递了进去。餐盘出来的时候是空的。就这样，女主开始给美人梳头、按摩。慢慢的，她逐渐意识到美人举手投足散发出来的，她从未见到过的那种称之为“魅力”的东西，她自己也被深深的吸引着。她跟着美人去了她继子的酒吧，看到美人唱歌，一窝蜂的男人围着她转。这时那个彪悍的女人也在酒吧，看到她继子和他现在的女人在一起，上去打了那个女人一巴掌。这下整个酒吧开始乱糟糟的，而女主在此时却像稚童般，天真的观望着周遭的一切。没过多久，一个白人高官的妻子在一次市集中看中了那个彪悍的女人，想要她当自己的仆人。那个女人有着自己的孩子，自然是不愿意的，她的反抗得罪了高官，直接将她关进了监狱。在监狱的日子是怎样的我们不知道，过了几年这个女人从监狱里出来了，同时她还瞎了一只眼睛。更为无奈的是，她最终还是成为了那个高官妻子的仆人，仿佛失去了灵魂般不再有她从前的性子，整个人变得麻木妥协。之后高官妻子曾经带着她回去看她的孩子和亲人，女主人失手没能控制好汽车的倒车，并且误以为想要帮助她的黑人对她有所图谋，为了保护女主人，她无奈的还是跟着女主人走了。而这时，那个美人也决定走了。女主很渴望能和美人一起走，她兴冲冲的回家，颤抖着开始收拾起自己的行李，看着美人走上了公交车，她多么希望自己也能跟着一起。这时在一旁送别美人的她的丈夫，仿佛看穿了女主的意图。他盯着女主，仿佛笃定女主是绝对不敢上车的。而女主，确实，纵使万般想要上车，还是没能克服内心的恐惧，最终只能目送车子走远。就这么又过了几年，那个女仆终于回到了家里，美人有了丈夫又重新回到小镇里。一次意外，女主和美人发现，原来女主的妹妹一直有给她写信，只是信故意被她男人收起来了，此时，女主第一次有了愤怒，如果不是美人的及时出现，她甚至想在给丈夫刮胡子的时候用刀片用力的割他的脖子。而男人，在事后想起女主眼中的杀气，仍感到心有余悸。在接下来的一次大聚餐中，女主当着所有人的面，告诉她的丈夫，她要离开他。或许是受到女主的勇气的鼓舞，那个曾经彪悍的女人，眼里刹那间也迸发出了光彩，讲述她刚被关进监狱时，不听话就挨揍，在她反复被揍之后，她才无奈的放弃了反抗。可是女主的这番举动，让她好似也找回了自己的勇气。最不敢相信这一切的无疑是女主的丈夫了，他万万想不到女主竟然会有勇气选择离开。失去女主的那个家，不再整洁，男人浑浑噩噩，也不再对他的父亲言听计从。电影的结尾，女主与她妹妹重逢了，她的两个孩子也平安长大，一家人终于团聚。怎么说呢，这部电影我触动最大的，是女主的一个成长和转变。她从小成长的环境决定了她青年时代只能任人安排，不断向男人妥协。而在她长大的过程中，她见识到了那个彪悍的女人，她开始发现原来女人还可以那样阳光，自尊自强。随后，她又结识了美人，发现女人还可以这样优雅、魅力四射。最后是在妹妹的亲情的鼓励下，她冲破了那个跟随她几十年的思想的桎梏，终于为自己，学会争取，学会拒绝，学会独立坚强。在这部电影中，我看到自信的强大，自信的感染力，自尊自立对人的重要。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>十一七天假期快结束了。回顾一下这七天，不免有些羞愧。既没有出去玩耍，宅着也没有很好的持续学习。如果时间真的随人的感受有长有短的话，那么这七天在我的感受里就是短暂的。在这假期里，我凑巧看了两部电影的解析，分别是《横空出世》和《purple》。依然抱歉的是我没有去看原片，而是选择了时长较短的电影解说，我不知道这是不是出于浮躁的心态还是别的什么原因。之所以想写一下这两部电影，是因为单单看完了电影解说，就让我有很多的感想。仔细想想，好电影是不是就是引起观众内心的共鸣，打动人心了，才让人对它赞不绝口，印象深刻。</p>\n<p>先说《横空出世》吧。正值国庆，因此这部电影被推出来也不奇怪，但是我还是觉得这部电影应该被大众所熟知的。它记录了一段历史，一段如此励志、真正体现中国人民珍贵品质的历史。从出生以来，我知道我不能代表所有人，但是我生活的这个时代，从大多数人来看，从看过的历史来看，确实是和平幸福的。而现在的这一切，难道都是平白无故上天恩赐的吗？这也是横空出世这部电影打动我的地方。通过这部电影，我才有幸知道了那段历史，我现在所处的相对和平的时代，是那一代的中国人，是打完抗日去抗美援朝，战争结束后又被派到戈壁负责寻找和建造核武器基地的老兵，是在那个没有计算机的年代靠打算盘计算公式，用能覆盖整个戈壁的演算纸，在不能出错并且只有两年时间限制里的科学家，共同努力制造出了起到震慑、令其他国家不敢随意染指我们国家的核武器——原子弹。这其中的艰辛，就是电影也道不尽演不完。身处和平年代的我们，怎么能不感激，怎么能不致敬！</p>\n<p>再谈一下《purple》。一开始看到这个电影解说，我也是出于无聊随便点进去的，刚开始的种种画面，全部是黑人，女主人公的悲惨遭遇引发了我的好奇心。女主先是被她的父亲强奸生下了两个孩子，全部被抱走。她的母亲知道这些事情却没有能力保护她。她最疼爱的妹妹被一个男人看上，她的父亲认为妹妹还小让她代替她妹妹嫁给了那个男人。和那个男人在一起后，女主像个佣人服侍着家中的一切，妹妹很快被她父亲缠上。为了躲避父亲的骚扰，妹妹去了女主家里，姐妹得以重逢，她们快乐的生活了一段日子。可是因为男人对妹妹的骚扰，在一次强奸未遂后，妹妹离开了女主，走之前妹妹约定每个月会给女主写一封信。女主一直在等妹妹的信，而信却迟迟没有来。再说那个男人，他心中一直有一个很喜欢的人，因此总会出现这样的场景，女主总是帮男人烫好礼服，然后男人穿上礼服去找他喜欢的女人约会。看到这里我心里是为这个女主感到悲哀和无奈的，我以为这是一部核心为表达黑人女性家庭地位低下的悲剧电影。然而，随着一个女性的出现，剧情开始了转变。电影前面大量的渲染了黑人女主的悲惨，默默忍受她的周遭施加给她的一切侮辱，逆来顺受。而此时出现了一个女性，在女主看来简直是不可思议，她强壮的体魄，如同她的性格，像一团火，不受男人的束缚，做自己觉得对的事情。她可以在不满男人的行为时随手甩男人一巴掌，她是如此可爱的存在，和女主的对比，让人忍不住为这个女生鼓掌。这个女人和女主男人的儿子走在了一起，开了一个酒吧。而那个男人看不惯这个女人的性格，想要逼迫儿子与她分开。甚至连女主，也在告诉继子男人在女人不听话的时候就打女人。那个彪悍的女人很愤怒，因为连一个不敢反抗的女性都在帮助男人欺负她。最终儿子迫于父亲的威严，选择与她分开，又找了另一个女人一起生活。同时，那个男人一直喜欢的女人，为了养病还是什么原因，住进了女主的家里。随着这个女人的到来，不同于我们认为的必然会发生的女人间的战争，女主对这个美丽女人更多的是好奇。她观察着向来对她颐气指使的丈夫，笨手笨脚的给美人做餐点，被美人嫌弃打翻扔出房门，她自己也偷偷做了一个餐点递了进去。餐盘出来的时候是空的。就这样，女主开始给美人梳头、按摩。慢慢的，她逐渐意识到美人举手投足散发出来的，她从未见到过的那种称之为“魅力”的东西，她自己也被深深的吸引着。她跟着美人去了她继子的酒吧，看到美人唱歌，一窝蜂的男人围着她转。这时那个彪悍的女人也在酒吧，看到她继子和他现在的女人在一起，上去打了那个女人一巴掌。这下整个酒吧开始乱糟糟的，而女主在此时却像稚童般，天真的观望着周遭的一切。没过多久，一个白人高官的妻子在一次市集中看中了那个彪悍的女人，想要她当自己的仆人。那个女人有着自己的孩子，自然是不愿意的，她的反抗得罪了高官，直接将她关进了监狱。在监狱的日子是怎样的我们不知道，过了几年这个女人从监狱里出来了，同时她还瞎了一只眼睛。更为无奈的是，她最终还是成为了那个高官妻子的仆人，仿佛失去了灵魂般不再有她从前的性子，整个人变得麻木妥协。之后高官妻子曾经带着她回去看她的孩子和亲人，女主人失手没能控制好汽车的倒车，并且误以为想要帮助她的黑人对她有所图谋，为了保护女主人，她无奈的还是跟着女主人走了。而这时，那个美人也决定走了。女主很渴望能和美人一起走，她兴冲冲的回家，颤抖着开始收拾起自己的行李，看着美人走上了公交车，她多么希望自己也能跟着一起。这时在一旁送别美人的她的丈夫，仿佛看穿了女主的意图。他盯着女主，仿佛笃定女主是绝对不敢上车的。而女主，确实，纵使万般想要上车，还是没能克服内心的恐惧，最终只能目送车子走远。就这么又过了几年，那个女仆终于回到了家里，美人有了丈夫又重新回到小镇里。一次意外，女主和美人发现，原来女主的妹妹一直有给她写信，只是信故意被她男人收起来了，此时，女主第一次有了愤怒，如果不是美人的及时出现，她甚至想在给丈夫刮胡子的时候用刀片用力的割他的脖子。而男人，在事后想起女主眼中的杀气，仍感到心有余悸。在接下来的一次大聚餐中，女主当着所有人的面，告诉她的丈夫，她要离开他。或许是受到女主的勇气的鼓舞，那个曾经彪悍的女人，眼里刹那间也迸发出了光彩，讲述她刚被关进监狱时，不听话就挨揍，在她反复被揍之后，她才无奈的放弃了反抗。可是女主的这番举动，让她好似也找回了自己的勇气。最不敢相信这一切的无疑是女主的丈夫了，他万万想不到女主竟然会有勇气选择离开。失去女主的那个家，不再整洁，男人浑浑噩噩，也不再对他的父亲言听计从。电影的结尾，女主与她妹妹重逢了，她的两个孩子也平安长大，一家人终于团聚。怎么说呢，这部电影我触动最大的，是女主的一个成长和转变。她从小成长的环境决定了她青年时代只能任人安排，不断向男人妥协。而在她长大的过程中，她见识到了那个彪悍的女人，她开始发现原来女人还可以那样阳光，自尊自强。随后，她又结识了美人，发现女人还可以这样优雅、魅力四射。最后是在妹妹的亲情的鼓励下，她冲破了那个跟随她几十年的思想的桎梏，终于为自己，学会争取，学会拒绝，学会独立坚强。在这部电影中，我看到自信的强大，自信的感染力，自尊自立对人的重要。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl6ez4t3g0002gisgmo1b66l8","category_id":"cl6ez4t3l0005gisgw8ywby6c","_id":"cl6ez4t3u000ggisgeg1pfkst"},{"post_id":"cl6ez4t3k0004gisgzh2ppx6x","category_id":"cl6ez4t3l0005gisgw8ywby6c","_id":"cl6ez4t3w000mgisg46z6lgp6"},{"post_id":"cl6ez4t3v000jgisgqax7rjbk","category_id":"cl6ez4t3u000fgisgioogu81j","_id":"cl6ez4t3x000qgisgif3ouo9z"},{"post_id":"cl6ez4t3n0007gisgs9zowv07","category_id":"cl6ez4t3u000fgisgioogu81j","_id":"cl6ez4t3y000ugisg2131ljub"},{"post_id":"cl6ez4t3v000lgisg52jar186","category_id":"cl6ez4t3u000fgisgioogu81j","_id":"cl6ez4t3y000wgisg6m0vkvyf"},{"post_id":"cl6ez4t3o0008gisgqva0bo7a","category_id":"cl6ez4t3u000fgisgioogu81j","_id":"cl6ez4t41000zgisgbebernkl"},{"post_id":"cl6ez4t3p0009gisgyjthh0ia","category_id":"cl6ez4t3u000fgisgioogu81j","_id":"cl6ez4t410012gisg4g6yzkna"},{"post_id":"cl6ez4t3s000dgisgdmhucn1c","category_id":"cl6ez4t3u000fgisgioogu81j","_id":"cl6ez4t420015gisgxf1voqia"},{"post_id":"cl6ez4t3t000egisg158df3xs","category_id":"cl6ez4t410011gisg2vwroiky","_id":"cl6ez4t420017gisgxebgle49"},{"post_id":"cl6ez4t4t0018gisgkkee8iqv","category_id":"cl6ez4t3l0005gisgw8ywby6c","_id":"cl6ez4t4v001dgisg3jo0uav5"},{"post_id":"cl6ez4t4t0019gisg5ad6teac","category_id":"cl6ez4t3l0005gisgw8ywby6c","_id":"cl6ez4t4v001fgisgmmm5zv4w"},{"post_id":"cl6ez4t4u001bgisg1e9vplka","category_id":"cl6ez4t3u000fgisgioogu81j","_id":"cl6ez4t4v001ggisg068mmfqr"}],"PostTag":[{"post_id":"cl6ez4t3g0002gisgmo1b66l8","tag_id":"cl6ez4t3m0006gisgkxo440bn","_id":"cl6ez4t3r000cgisgtcpwg15g"},{"post_id":"cl6ez4t3k0004gisgzh2ppx6x","tag_id":"cl6ez4t3m0006gisgkxo440bn","_id":"cl6ez4t3u000igisg3c8w1cie"},{"post_id":"cl6ez4t3t000egisg158df3xs","tag_id":"cl6ez4t3m0006gisgkxo440bn","_id":"cl6ez4t3v000kgisgwbgngld1"},{"post_id":"cl6ez4t3n0007gisgs9zowv07","tag_id":"cl6ez4t3u000hgisgnhdy298p","_id":"cl6ez4t3x000pgisg062wphjn"},{"post_id":"cl6ez4t3v000lgisg52jar186","tag_id":"cl6ez4t3u000hgisgnhdy298p","_id":"cl6ez4t3x000rgisgybp931f6"},{"post_id":"cl6ez4t3o0008gisgqva0bo7a","tag_id":"cl6ez4t3w000ogisgaj0ms9rf","_id":"cl6ez4t3y000vgisgv4s0eoon"},{"post_id":"cl6ez4t3p0009gisgyjthh0ia","tag_id":"cl6ez4t3u000hgisgnhdy298p","_id":"cl6ez4t410010gisg2syqjc4b"},{"post_id":"cl6ez4t3s000dgisgdmhucn1c","tag_id":"cl6ez4t3u000hgisgnhdy298p","_id":"cl6ez4t420014gisgyu5kxotj"},{"post_id":"cl6ez4t3v000jgisgqax7rjbk","tag_id":"cl6ez4t410013gisg3wursev7","_id":"cl6ez4t420016gisgw9z2rb5i"},{"post_id":"cl6ez4t4t0018gisgkkee8iqv","tag_id":"cl6ez4t3m0006gisgkxo440bn","_id":"cl6ez4t4u001agisg3pyou62x"},{"post_id":"cl6ez4t4t0019gisg5ad6teac","tag_id":"cl6ez4t3m0006gisgkxo440bn","_id":"cl6ez4t4v001cgisgq0c0fmle"},{"post_id":"cl6ez4t4u001bgisg1e9vplka","tag_id":"cl6ez4t3w000ogisgaj0ms9rf","_id":"cl6ez4t4v001egisgrocbrjc7"}],"Tag":[{"name":"基础","_id":"cl6ez4t3m0006gisgkxo440bn"},{"name":"心情","_id":"cl6ez4t3u000hgisgnhdy298p"},{"name":"电影","_id":"cl6ez4t3w000ogisgaj0ms9rf"},{"name":"待验证","_id":"cl6ez4t410013gisg3wursev7"}]}}